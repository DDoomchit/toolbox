[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "데이터과학 툴박스 (2025)",
    "section": "",
    "text": "수업계획\n\n12월26일(화) – 10:00~16:30 day1 수업\n12월27일(수) – 10:00~16:30 day2 수업\n12월30일(목) – 10:00~16:30 day3 수업\n12월31일(금) – 10:00~16:30 day4 수업\n1월2일(월) – 10:00~16:30 Q&A\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nDec 26, 2024\n\n\nDay1: 실습1 - 실습12\n\n\n최규빈 \n\n\n\n\nJan 10, 2024\n\n\nDay5: 실습64 - 실습67\n\n\n최규빈 \n\n\n\n\nJan 10, 2024\n\n\nDay6: 실습68 - 실습77\n\n\n최규빈 \n\n\n\n\nJan 5, 2024\n\n\nDay4: 실습41 - 실습63\n\n\n최규빈 \n\n\n\n\nJan 4, 2024\n\n\nDay3: 실습26 - 실습40\n\n\n최규빈 \n\n\n\n\nJan 3, 2024\n\n\nDay2: 실습13 - 실습25\n\n\n최규빈 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/day4.html#실습41-포트정리-lsof",
    "href": "posts/day4.html#실습41-포트정리-lsof",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습41: 포트정리 (lsof)",
    "text": "실습41: 포트정리 (lsof)\n- lsof 프로그램 설치\napt-get install lsof\napt install lsof \n- 23052 포트를 사용하는 프로그램이 있는지 파악\nlsof -i :23052\n결과는 아래와 같은 예시로 나옴\nCOMMAND      PID USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME\njupyter-l 862165 root    6u  IPv4 383551982      0t0  TCP *:23052 (LISTEN)\njupyter-l 862165 root   12u  IPv4 383671448      0t0  TCP 8c8831330c68:23052-&gt;210.117.173.181:59663 (ESTABLISHED)\njupyter-l 862165 root   16u  IPv4 383628690      0t0  TCP 8c8831330c68:23052-&gt;210.117.173.181:59664 (ESTABLISHED)\njupyter-l 862165 root   29u  IPv4 383612831      0t0  TCP 8c8831330c68:23052-&gt;210.117.173.181:59720 (ESTABLISHED)\njupyter-l 862165 root   34u  IPv4 383671463      0t0  TCP 8c8831330c68:23052-&gt;210.117.173.181:59667 (ESTABLISHED)\n- 각자해볼것: ssh 접속시 사용하는 포트 제외하고 나머지 포트를 쓰고 있는 프로그램은 삭제\nkill {PID}\n위의 예시의 경우\nkill 862165\n- 주피터랩 평생켜놓기 + 끄기 (이거 자유자재로 할 수 있어야함)\n- PID를 조회하는 다른방법\nps aux | grep jupyter"
  },
  {
    "objectID": "posts/day4.html#실습42-py310-co-환경에-주피터를-설치",
    "href": "posts/day4.html#실습42-py310-co-환경에-주피터를-설치",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습42: py310, co 환경에 주피터를 설치",
    "text": "실습42: py310, co 환경에 주피터를 설치\n- 아래를 설치\n(py310) conda install -c conda-forge jupyterlab \n(py310) conda install -c conda-forge notebook \n(co) conda install -c conda-forge jupyterlab \n(co) conda install -c conda-forge notebook \n- 이래야 해당환경에서 주피터를 연결할 수 있음."
  },
  {
    "objectID": "posts/day4.html#실습43-py310-co-환경에-주피터랩을-각각-띄우기",
    "href": "posts/day4.html#실습43-py310-co-환경에-주피터랩을-각각-띄우기",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습43: py310, co 환경에 주피터랩을 각각 띄우기",
    "text": "실습43: py310, co 환경에 주피터랩을 각각 띄우기\n- 아래를 이용\n(py310) jupyter lab --port 23052 \n(co) jupyter lab --port 33052 \n\n터미널 여러개 쓰는게 편할걸요?\n\n- 참고로 위의 명령은 vi jupyter_notebook_config.py 에 대한 설정이 올바르게 끝난 상태에서 가능한 명령어임.\n- 이제 23052 와 33052 는 각각 다른 파이썬 커널과 연결됨. 아래를 각각 실행해보자.\nimport pandas as pd\ndf = pd.DataFrame({'A':[2143,2143],'B':['-',3456]})\ndf.map(lambda x: 0 if x == '-' else x)\n결과가 어떠한가? 왜 이런 결과가 나왔다고 생각하는가?"
  },
  {
    "objectID": "posts/day4.html#실습44-quarto-preview",
    "href": "posts/day4.html#실습44-quarto-preview",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습44: quarto preview",
    "text": "실습44: quarto preview\n- 블로그를 미리보면서 편집하고 싶음.\n- 1개의 포트에는 (py310)에 설치된 jupyterlab을 할당 + 1개의 포트에는 quarto preview를 할당\nquarto preview --host \"0.0.0.0\" --port 43052\n- 개인적소감: 반응이 살짝 느려서 별로임. (좋을때: 처음에는 좋음)"
  },
  {
    "objectID": "posts/day4.html#실습45-quarto-preview-test.qmd",
    "href": "posts/day4.html#실습45-quarto-preview-test.qmd",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습45: quarto preview test.qmd",
    "text": "실습45: quarto preview test.qmd\n- 파일하나만 찍어서 preview\nquarto preview day4.qmd --host \"0.0.0.0\" --port 43052\n- QMD파일은 RMD의 진화. (구 Rmarkdown)\n\nMD –&gt; RMD, QMD\n\n- 마크다운 문법이 가능함. (MD의 기능)\n\n수식\n목록화\n\n- 또한 R, Python, Julia 등의 코드를 삽입하여 실행할 수 있음. (RMD, QMD의 기능??)\n```{python}\nimport matplotlib.pyplot as plt\na = [1,2,4]\na = a+[3] \nplt.plot(a)\n```\n- quarto는 .ipynb의 렌더링과 .qmd의 렌더링 모두 지원한다.\n- 그런데 좀 이상하지 않아요??"
  },
  {
    "objectID": "posts/day4.html#실습46-py310.qmd-co.qmd-hw",
    "href": "posts/day4.html#실습46-py310.qmd-co.qmd-hw",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습46: py310.qmd / co.qmd (hw)",
    "text": "실습46: py310.qmd / co.qmd (hw)\n- 해보기1: 아래와 같이 py310.qmd 파일을 만들고 (py310)에서 preview 해보기\n\n\npy310.qmd\n\n```{python}\nimport pandas as pd\ndf = pd.DataFrame({'A':[2143,2143],'B':['-',3456]})\ndf.map(lambda x: 0 if x == '-' else x)\n```\n\n- 해보기2: 아래와 같이 co.qmd 파일을 만들고 (co)에서 preview 해보기\n\n\nco.qmd\n\n```{python}\nimport pandas as pd\ndf = pd.DataFrame({'A':[2143,2143],'B':['-',3456]})\ndf.map(lambda x: 0 if x == '-' else x)\n```"
  },
  {
    "objectID": "posts/day4.html#실습47-rpython-사용가능한-개발환경-만들기",
    "href": "posts/day4.html#실습47-rpython-사용가능한-개발환경-만들기",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습47: R+Python 사용가능한 개발환경 만들기",
    "text": "실습47: R+Python 사용가능한 개발환경 만들기\n- 아래를 실행\nconda create -n r \nconda activate r\nconda install -c conda-forge r-essentials\nconda install -c conda-forge plotly\n- 여기에서 conda install -c conda-forge r-essentials로 인하여 R, Python, Jupyter 가 모두 최신버전으로 설치된다.\n- 또한 R에는 이미 tidyverse, IRkernel 등의 패키지가 기본으로 깔려있다.\n- R이 설치된 경로를 찾아보자.\n- 수틀리면 이 R을 지우면 된다.\n- R이 설치될 수 있는 3가지 시나리오\nsudo apt-get install r-base # r 공식홈페이지, 수틀리면 리눅스 포맷  \n(base) conda install -c conda-forge ... # 수틀리면 아나콘다 삭제해야함. \n(r) conda install -c conda-forge ... # 수틀리면 가상환경 삭제"
  },
  {
    "objectID": "posts/day4.html#실습48-포스트-업로드",
    "href": "posts/day4.html#실습48-포스트-업로드",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습48: 포스트 업로드",
    "text": "실습48: 포스트 업로드\n- 해보기1: 적당한 ?.qmd 파일을 만들고 아래와 같은 포스트를 올려보자.\n- 해보기2: 적당한 ?.ipynb 파일을 만들고 아래와 같은 포스트를 올려보자.\n- 해보기3: 적당한 ?.qmd 파일을 만들고 아래와 같은 포스트를 올려보자."
  },
  {
    "objectID": "posts/day4.html#실습49-포스트-업로드-쉽게-하는-방법",
    "href": "posts/day4.html#실습49-포스트-업로드-쉽게-하는-방법",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습49: 포스트 업로드 쉽게 하는 방법",
    "text": "실습49: 포스트 업로드 쉽게 하는 방법\n- 스크립트 파일 만들어요..\n\n\nupload\n\nquarto render \ngit add .\ngit commit -m .\ngit push"
  },
  {
    "objectID": "posts/day4.html#실습50-스크립트-파일의-위치",
    "href": "posts/day4.html#실습50-스크립트-파일의-위치",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습50: 스크립트 파일의 위치?",
    "text": "실습50: 스크립트 파일의 위치?\n- 아래파일을 어디에 두면 좋을까?\n\n\nupload.sh\n\nquarto render \ngit add .\ngit commit -m .\ngit push \n\n- 저는 뭐 그냥.. 홈에두긴해요"
  },
  {
    "objectID": "posts/day4.html#실습51-실행파일들의-위치",
    "href": "posts/day4.html#실습51-실행파일들의-위치",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습51: 실행파일들의 위치",
    "text": "실습51: 실행파일들의 위치"
  },
  {
    "objectID": "posts/day4.html#실습52-ls의-이름바꾸기-실습추천x",
    "href": "posts/day4.html#실습52-ls의-이름바꾸기-실습추천x",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습52: ls의 이름바꾸기 (실습추천X)",
    "text": "실습52: ls의 이름바꾸기 (실습추천X)"
  },
  {
    "objectID": "posts/day4.html#실습53-bash커널의-이해",
    "href": "posts/day4.html#실습53-bash커널의-이해",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습53: bash커널의 이해",
    "text": "실습53: bash커널의 이해\n- 예비학습: 파이썬 커널\n- 예시1\na='askdfj;alskdjf;klajsdf'\na\n$a\necho $a\n- 예시2\na=('개' '고양이' '토끼')\necho $a \necho ${a}\necho ${a[0]}\necho ${a[1]}\necho ${a[@]}\n- 예시3\ncmd_list=(ls \"ls -a\") \n${cmd_list}\n${cmd_list[0]}\n${cmd_list[1]}\n- 걱정: 근데 그러면 내 리눅스에는 평생 a, cmd_list 라는 변수가 있는거야?"
  },
  {
    "objectID": "posts/day4.html#실습54-path-우분투에-저장된-영구변수",
    "href": "posts/day4.html#실습54-path-우분투에-저장된-영구변수",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습54: PATH – 우분투에 저장된 영구변수",
    "text": "실습54: PATH – 우분투에 저장된 영구변수\n- 깨끗한 우분투에서\n$PATH # 쳐보세요\n- 아나콘다가 설치된 우분투에서\n$PATH # 쳐보세요"
  },
  {
    "objectID": "posts/day4.html#실습54-용어의-정리",
    "href": "posts/day4.html#실습54-용어의-정리",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습54: 용어의 정리",
    "text": "실습54: 용어의 정리\n- 폴더와 파일\n\n폴더: 끝에 /로 끝남. (근데 생략가능함)\n파일: 끝에 /로 끝나지 않음.\n\n- 개념: 모든것은 파일과 폴더의 집합이다.\n- 183번 컴퓨터로 가보자.\n- 우분투컴퓨터에 guebin이라는 유저를 새롭게 추가했다 = /home/guebin/ 를 만듦\n- 우분투에서 깃을 설치했다 = 우분투에서 sudo apt-get install git을 실행했다. = /usr/bin/에 git이라는 파일이 생겼다. = /usr/bin/git 생성\n- ls는 우분투에 이미 내장되어있는 기능이다. = ls는 우분투에 이미 내장되어있는 명령파일이다. = 우분투를 설치하면 /usr/bin/에 ls라는 파일이 이미 있다.\n- 우분투에 guebin이라는 유저를 등록했다. 이후에 guebin이라는 유저가 아나콘다를 설치했다. = 우분투에 guebin이라는 유저를 등록했다. 이후에 guebin이라는 유저는 아나콘다를 이용하여 가상의 (base)환경을 만들었다. = /home/guebin/anaconda3/폴더가 만들어졌다는 의미.\n- 우분투에 guebin이라는 (슈퍼)유저를 등록했다. 이후에 guebin이라는 (슈퍼)유저가 루트권한을 이용하여 git을 설치했다. = /home/guebin/ 이 만들어짐 + /usr/bin/git 생성"
  },
  {
    "objectID": "posts/day4.html#실습55-폴더의-레벨",
    "href": "posts/day4.html#실습55-폴더의-레벨",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습55: 폴더의 레벨",
    "text": "실습55: 폴더의 레벨\n- 183번 컴퓨터에는 4개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nguebin우분투\nguebin우분투-(base)\nguebin우분투-(py310)\n\n- 186번 컴퓨터에는 3개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nroot우분투-(base)\nroot우분투-(py310)\n\n- guebin이라는 윈도우유저가 anaconda (base)를 이용하는 경우 2개의 컴퓨터가 존재한다.\n\nguebin윈도우\nguebin윈도우-(base)"
  },
  {
    "objectID": "posts/day4.html#실습56-난-어디에서-깃을-설치했어",
    "href": "posts/day4.html#실습56-난-어디에서-깃을-설치했어",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습56: 난 어디에서 깃을 설치했어?",
    "text": "실습56: 난 어디에서 깃을 설치했어?\n- 문제1: 183번 컴퓨터에는 4개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nguebin우분투\nguebin우분투-(base)\nguebin우분투-(py310)\n\n아래의 명령을 통하여 깃을 설치했다.\n(base) sudo apt-get install git \n깃은 어디에 설치되어있는가?\n- 문제2: 183번 컴퓨터에는 4개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nguebin우분투\nguebin우분투-(base)\nguebin우분투-(py310)\n\n아래와 같이 깃을 설치했다.\n(py310) sudo apt-get install git \n깃은 어디에 설치되어있는가?\n- 문제3: 183번 컴퓨터에는 4개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nguebin우분투\nguebin우분투-(base)\nguebin우분투-(py310)\n\n아래의 명령을 통하여 깃을 설치했다.\n(py310) conda install -c conda-forge git \n깃은 어디에 설치되어있는가?\n- 문제4: 183번 컴퓨터에는 4개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nguebin우분투\nguebin우분투-(base)\nguebin우분투-(py310)\n\n아래와 같이 깃을 설치했다.\n(base) conda install -c conda-forge git\n깃은 어디에 설치되어있는가? (이때는 base에 설치된 git이 다른환경에 영향을 주지 않음)"
  },
  {
    "objectID": "posts/day4.html#실습57-난-어디에서-quarto를-설치했어",
    "href": "posts/day4.html#실습57-난-어디에서-quarto를-설치했어",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습57: 난 어디에서 quarto를 설치했어?",
    "text": "실습57: 난 어디에서 quarto를 설치했어?\n- 문제1: 183번 컴퓨터에는 4개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nguebin우분투\nguebin우분투-(base)\nguebin우분투-(py310)\n\n아래의 명령을 통하여 quarto를 설치했다.\n(base) wget https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.533/quarto-1.4.533-linux-amd64.deb\n(base) sudo dpkg -i quarto-1.4.533-linux-amd64.deb \nquarto는 어디에 설치되어있는가?\n- 문제2: 183번 컴퓨터에는 4개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nguebin우분투\nguebin우분투-(base)\nguebin우분투-(py310)\n\n아래의 명령을 통하여 quarto를 설치했다.\n(base) wget https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.533/quarto-1.4.533-linux-amd64.deb\n(base) conda activate py310 \n(py310) sudo dpkg -i quarto-1.4.533-linux-amd64.deb \nquarto는 어디에 설치되어있는가?\n- 문제3: 183번 컴퓨터에는 4개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nguebin우분투\nguebin우분투-(base)\nguebin우분투-(py310)\n\n아래의 명령을 통하여 quarto를 설치했다.\n(py310) wget https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.533/quarto-1.4.533-linux-amd64.deb\n(py310) sudo dpkg -i quarto-1.4.533-linux-amd64.deb \nquarto는 어디에 설치되어있는가?\n- 문제4: 183번 컴퓨터에는 4개의 중첩된 컴퓨터(=폴더)가 존재한다.\n\nroot우분투\nguebin우분투\nguebin우분투-(base)\nguebin우분투-(py310)\n\n아래의 명령을 통하여 quarto를 설치했다.\n(py310) wget https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.533/quarto-1.4.533-linux-amd64.deb\n(py310) conda activate base \n(base) sudo dpkg -i quarto-1.4.533-linux-amd64.deb \nquarto는 어디에 설치되어있는가?"
  },
  {
    "objectID": "posts/day4.html#실습58-난-어디에서-upload.sh를-설치했어",
    "href": "posts/day4.html#실습58-난-어디에서-upload.sh를-설치했어",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습58: 난 어디에서 upload.sh를 설치했어?",
    "text": "실습58: 난 어디에서 upload.sh를 설치했어?\n- 어떤 폴더에 넣느냐에 따라서 다르겠죠."
  },
  {
    "objectID": "posts/day4.html#실습59-여러가지-프로그램-여러가지-설치방법",
    "href": "posts/day4.html#실습59-여러가지-프로그램-여러가지-설치방법",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습59: 여러가지 프로그램, 여러가지 설치방법",
    "text": "실습59: 여러가지 프로그램, 여러가지 설치방법\n- 우분투자체의 프로그램\n\n우분투 자체의 프로그램 예시: git, quarto, python, R, anaconda, vi, ssh, wget, vscode\n우분투 자체의 프로그램은 다시 모든 유저가 영향을 받는 받는 프로그램과 그렇지 않은 프로그램이 있음\n우분투 자체의 프로그램을 설치하는 방법들\n\nsudo apt install git \nsudo apt-get install git \nsudo dpkg -i quarto-1.4.533-linux-amd64.deb \nbash Anaconda3-2019.03-Linux-x86_64.sh\nsudo gdebi rstudio-server-1.2.5033-amd64.deb\n# 기타 파일을 넣을 수 있는 모든 방법 (예를들면 압축파일 다운로드후 풀기) \n- 아나콘다(=base)에 종속된 프로그램\n\n아나콘다내에 종속된 프로그램의 예시: conda, python, R, jupyter\n아나콘다에 종속된 프로그램은 anaconda3 폴더안에 있음.\n\n- 아나콘다환경(=py310)에 종속시킬 수 “있는” 프로그램\n\n아나콘다내에 종속된 프로그램의 예시: python, R, jupyter\n아나콘다환경에 종속된 프로그램은 anaconda3/envs/py310 와 같은 형식의 폴더안에 있음.\n\n- 파이썬에 종속된 프로그램 (=파이썬패키지=파이썬라이브러리=파이썬모듈)\n\n파이썬에 종속된 프로그램 예시: numpy, pandas\n얘네들이 어디에 깔리는지는 그때그때 다름\n지우는 방법도 그때그때 다르겠지? (젤 편하고 깔끔하게 지우려면?)\n\n- R에 종속된 프로그램 (=R패키지=R라이브러리)\n\nR에 종속된 프로그램의 예시: tidyverse\n얘들이 어디 깔리는지도 그때그때 다름\n지우는 방법도 그때그때 다르겠지? (젤 편하고 깔끔하게 지우려면?)\n\n- 질문1: pip install vs conda install\n\n설치되는 레벨의 차이\n설치에서 느껴지는 편안함의 차이\n삭제할때 느껴지는 불편함의 차이\npip install pandas는 사실 install.packages(\"tidyverse\")에 대응되는 것임\n\n- 질문2: 언제 pip install을 쓰고 언제 conda install을 써야할까? 답은없어요. 저는 대충 아래와 같이 합니다. (해보고 수틀리면 그냥 환경날리세여)\n\n만만한 패키지는 pip install 로 설치: numpy, pandas\n까다로운 패키지는 conda install 로 설치: torch, autogluon"
  },
  {
    "objectID": "posts/day4.html#실습60-base에서-r에-있는-r-실행",
    "href": "posts/day4.html#실습60-base에서-r에-있는-r-실행",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습60: (base)에서 (r)에 있는 R 실행",
    "text": "실습60: (base)에서 (r)에 있는 R 실행\n- 원래는 불가능한 일이겠죠?\n- 억지로 가능하게 하려면?"
  },
  {
    "objectID": "posts/day4.html#실습61-r에서-ept라는-r패키지-설치하고-위치파악하기",
    "href": "posts/day4.html#실습61-r에서-ept라는-r패키지-설치하고-위치파악하기",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습61: (r)에서 EPT라는 R패키지 설치하고 위치파악하기",
    "text": "실습61: (r)에서 EPT라는 R패키지 설치하고 위치파악하기\n- R을 실행\nconda activate rpy\nR\n- 또다른 터미널을 열고 아래의 폴더로 이동 + 패키지확인\ncd ~/anaconda3/envs/rpy/lib/R/library\nls\n- EPT패키지 설치\ninstall.packages(\"EPT\")\n- ~/anaconda3/envs/rpy/lib/R/library에서 확인"
  },
  {
    "objectID": "posts/day4.html#실습62-r에-설치된-r과-주피터-연결하기",
    "href": "posts/day4.html#실습62-r에-설치된-r과-주피터-연결하기",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습62: (r)에 설치된 R과 주피터 연결하기",
    "text": "실습62: (r)에 설치된 R과 주피터 연결하기\n- R을 실행\nIRkernel::installspec()\n- 주피터 실행"
  },
  {
    "objectID": "posts/day4.html#실습63-대시보드-프리젠테이션-베끼기",
    "href": "posts/day4.html#실습63-대시보드-프리젠테이션-베끼기",
    "title": "Day4: 실습41 - 실습63",
    "section": "실습63: 대시보드, 프리젠테이션 베끼기",
    "text": "실습63: 대시보드, 프리젠테이션 베끼기\n- ref: https://guebin.github.io/DV2023/posts/14wk-1.html\n- 대시보드\n\nhttps://guebin.github.io/DASH\nhttps://quarto.org/docs/dashboards/\n\n- 프리젠테이션\n\nhttps://quarto.org/docs/presentations/revealjs/demo/#/interactive-slides-1\nhttps://quarto.org/docs/presentations/revealjs/"
  },
  {
    "objectID": "posts/day5.html#실습64-docker로-rstudio-실행하기실습실-컴퓨터",
    "href": "posts/day5.html#실습64-docker로-rstudio-실행하기실습실-컴퓨터",
    "title": "Day5: 실습64 - 실습67",
    "section": "실습64: docker로 Rstudio 실행하기(실습실 컴퓨터)",
    "text": "실습64: docker로 Rstudio 실행하기(실습실 컴퓨터)\nref: https://rocker-project.org/\n- 다커실행파일 다운로드\n\nhttps://docs.docker.com/desktop/install/windows-install/\n\n- docker 이미지 다운로드\ndocker pull rocker/rstudio\n- 다운받은 이미지 확인하기\ndocker images\n- 이미지에서 컨테이너생성 + 확인\ndocker run -ti -e PASSWORD=\"jbnu\" -p 8787:8787 rocker/rstudio # 이미지에서 컨테이너 생성\ndocker ps # 확인 \n- 실행중인 컨테이너 중지 및 재시작 (stop,start) 해보고 의미 파악하기\ndocker stop {컨테이너ID}\ndocker start {컨테이너ID}\n- 아래명령의 차이는?\ndocker ps \ndocker ps -a \n- 아래명령의 차이는?\ndocker rm {컨테이너ID}\ndocker stop {컨테이너ID}\n- 이미지를 지우는 방법\ndocker image rm {이미지ID}"
  },
  {
    "objectID": "posts/day5.html#실습65-docker로-ubuntu-실행하기실습실-컴퓨터",
    "href": "posts/day5.html#실습65-docker로-ubuntu-실행하기실습실-컴퓨터",
    "title": "Day5: 실습64 - 실습67",
    "section": "실습65: docker로 ubuntu 실행하기(실습실 컴퓨터)",
    "text": "실습65: docker로 ubuntu 실행하기(실습실 컴퓨터)\n- 우분투 이미지 다운로드\ndocker pull ubuntu\n- 실행\ndocker run -ti -d -t ubuntu /bin/bash # 이미지에서 컨테이너 생성\ndocker exec -ti guebin bash # 컨테이너로 in"
  },
  {
    "objectID": "posts/day5.html#실습65-docker로-ubuntu-실행하기-183컴퓨터",
    "href": "posts/day5.html#실습65-docker로-ubuntu-실행하기-183컴퓨터",
    "title": "Day5: 실습64 - 실습67",
    "section": "실습65: docker로 ubuntu 실행하기 (183컴퓨터)",
    "text": "실습65: docker로 ubuntu 실행하기 (183컴퓨터)\n- 우분투안에서 우분투 실행\ndocker run -ti -d -t -p ?????:????? --name guebin ubuntu /bin/bash\ndocker exec -ti guebin bash \n- 아래를 수행\npasswd root\napt update \napt install gcc\napt install build-essential\napt install vim"
  },
  {
    "objectID": "posts/day5.html#실습66-코드스페이스-사용하기",
    "href": "posts/day5.html#실습66-코드스페이스-사용하기",
    "title": "Day5: 실습64 - 실습67",
    "section": "실습66: 코드스페이스 사용하기",
    "text": "실습66: 코드스페이스 사용하기\n- 아래를 이용하여 코드스페이스 설치\napt-get install curl\ncurl -Lk 'https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64' --output vscode_cli.tar.gz\ntar -xf vscode_cli.tar.gz\n- 아래를 이용하여 초기설정\n./code tunnel \n\n컴퓨터 이름 잘 써야해요…\n외워야 하는 이름이에요..\n\n- 코드스페이스 평생켜놓기\nnohup ./code tunnel &gt; /dev/null 2&gt;&1 &\n- 코드스페이스의 장점\n\n별도의 포트를 먹지 않는다.\n하나의 창에서 모든 가상환경을 동시에 이용할 수 있다. &lt;– 제가 이거때문에 씁니당..\n보안접속이 가능하다."
  },
  {
    "objectID": "posts/day5.html#실습67-rstudio-사용하기",
    "href": "posts/day5.html#실습67-rstudio-사용하기",
    "title": "Day5: 실습64 - 실습67",
    "section": "실습67: Rstudio 사용하기",
    "text": "실습67: Rstudio 사용하기\n- 아래를 이용하여 Rstudio를 설치 (base환경인지 r환경인지는 무의미)\nsudo apt-get install gdebi-core\nwget https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2022.12.0-353-amd64.deb\nsudo gdebi rstudio-server-2022.12.0-353-amd64.deb\n- grst가 만든 rstudio-server-conda를 클론\ngit clone https://github.com/grst/rstudio-server-conda.git\n- 내용을 수정\n\n\n~/rstudio-server-conda/local/start_rstudio_server.sh\n\n\n아래쪽으로 쭉 가면...\n\n/usr/lib/rstudio-server/bin/rserver --server-daemonize=0 \\\n  --www-port=????? \\ ### &lt;--- 여기 수정!!!!!\n  --auth-minimum-user-id=0 \\ ### &lt;--- 여기 추가!!!!!\n  --secure-cookie-key-file=$COOKIE_KEY_PATH \\\n  --server-pid-file=\"$CWD/rstudio-server.pid\" \\\n  --server-data-dir=\"$CWD/rstudio-server\" \\\n  --rsession-which-r=$(which R) \\\n  --rsession-ld-library-path=$CONDA_PREFIX/lib \\\n  --rsession-path=\"$CWD/rsession.sh\" \\\n  --server-user $USER \\\n  --database-config-file \"$CWD/database.conf\" \\\n  $REVOCATION_LIST_PAR\n\n- start_rstudio_server.sh를 실행"
  },
  {
    "objectID": "posts/day1.html",
    "href": "posts/day1.html",
    "title": "Day1: 실습1 - 실습12",
    "section": "",
    "text": "- 윈도우 컴퓨터에서 아래의 명령어가 뭘 의미하는지 살펴보자.\ndir\nmkdir asdf\ncd\ncd.. \n\n외우세요: 터미널을 열어준다 = 컴퓨터에 대한 제어권을 준다\n\n\n\n\n\n\n\nWarning\n\n\n\n강의노트의 숨은 의도: 터미널명령어 숙지의 중요성을 이해했으면.."
  },
  {
    "objectID": "posts/day1.html#터미널의-이해",
    "href": "posts/day1.html#터미널의-이해",
    "title": "Day1: 실습1 - 실습12",
    "section": "",
    "text": "- 윈도우 컴퓨터에서 아래의 명령어가 뭘 의미하는지 살펴보자.\ndir\nmkdir asdf\ncd\ncd.. \n\n외우세요: 터미널을 열어준다 = 컴퓨터에 대한 제어권을 준다\n\n\n\n\n\n\n\nWarning\n\n\n\n강의노트의 숨은 의도: 터미널명령어 숙지의 중요성을 이해했으면.."
  },
  {
    "objectID": "posts/day1.html#파이썬-설치방법-조사",
    "href": "posts/day1.html#파이썬-설치방법-조사",
    "title": "Day1: 실습1 - 실습12",
    "section": "2. 파이썬 설치방법 조사",
    "text": "2. 파이썬 설치방법 조사\n- 파이썬 배우는 초보자에게 가장 어려운것! - 선생님마다 설치하는 방법이 모두 다름\n- 왜 저렇게 설치방법이 다른가? 왜 다른 방법으로 각각 파이썬을 실행하는가? 이런것이 너무 어려움 - 방법1: 파이썬프로그램 다운로드 -&gt; 시작버튼 눌러서 설치 - 방법2: 아나콘다 설치 (그럼 자동으로 파이썬이 설치됨) - 방법3: 아나콘다 설치 + 가상환경 - …\n- 심지어 실행하는것도 다름 - 방법1: 파이썬 프롬프트 - 방법2: .py를 이용하여 실행? - 방법3: IDLE - 방법4: 파이참 - 방법5: 스파이더 - 방법6: Visual Studio Code - 방법7: 주피터노트북, 주피터랩 - 가상환경을 만들어서 해라.. - 아나콘다 네비게이터에 주피터가 있다.. - …\n- 머리아프니까 collab을 쓰라는 사람도 있음. 아니면 도커이미지를 줄테니까 그걸 쓰라는 사람도 있음. AWS를 쓰라는 사람도 있음..\n- 핵심: 그냥 (1) 컴퓨터에 (2) 파이썬을 깔아서 (3) 실행하는 것임\n- 의문: 그런데 방법이 왜이렇게 많은가? 엑셀처럼 프로그램 설치하고 아이콘 더블클릭하면 끝나는 식으로 만들어야 하는것 아닌가?"
  },
  {
    "objectID": "posts/day1.html#python-실행하고-살펴보기",
    "href": "posts/day1.html#python-실행하고-살펴보기",
    "title": "Day1: 실습1 - 실습12",
    "section": "3. python 실행하고 살펴보기",
    "text": "3. python 실행하고 살펴보기\n- 윈도우에서 anaconda prompt 실행 -&gt; python\n(base) C:\\Users\\python&gt;python\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; [1,2,3]+[4]\n[1, 2, 3, 4]\n&gt;&gt;&gt; a=[1,2,3]+[4]\n&gt;&gt;&gt; a\n[1, 2, 3, 4]\n- 2개를 실행할 수도 있음. (두 환경은 각각 서로 독립적인 파이썬, 변수가 공유되지 않음) \\(\\star\\)\n- 아쉬운점: `?list’와 같이 도움말 기능이 동작하지 않음\n&gt;&gt;&gt; ?list\n  File \"&lt;stdin&gt;\", line 1\n    ?list\n    ^\nSyntaxError: invalid syntax\n&gt;&gt;&gt;"
  },
  {
    "objectID": "posts/day1.html#python-으로-코딩하기-최악",
    "href": "posts/day1.html#python-으로-코딩하기-최악",
    "title": "Day1: 실습1 - 실습12",
    "section": "4. python 으로 코딩하기 (최악)",
    "text": "4. python 으로 코딩하기 (최악)\n- 1부터 10까지 합을 구하는 프로그램을 만들고 싶음\n- 시도1: python을 키고 아래와 같이 실행\n(base) C:\\Users\\python&gt;python\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; total = 0\n&gt;&gt;&gt; for i in range(10):\n...     total=total+i\n...\n&gt;&gt;&gt; total\n45\n&gt;&gt;&gt;\n- 반성: 정답은 55인데 45가 출력되었다! \\(\\to\\) range(10)을 range(1,11)으로 바꿔야겠다!\n- 시도2: range(1,11)을 바꿔야겠다고 생각하고 다시 입력하다가 오타가 발생\n&gt;&gt;&gt; total =0\n&gt;&gt;&gt; for i in range(1,11):\n...     total = totla +i\n...\n\n앗 totla이라고 잘못쳤다.\n\n- 반성: 다음에는 정신을 똑바로 차려야겠다."
  },
  {
    "objectID": "posts/day1.html#ipython-실행하고-살펴보기",
    "href": "posts/day1.html#ipython-실행하고-살펴보기",
    "title": "Day1: 실습1 - 실습12",
    "section": "5. ipython 실행하고 살펴보기",
    "text": "5. ipython 실행하고 살펴보기\n- 윈도우에서 anaconda prompt 실행 -&gt; ipython\n(base) C:\\Users\\python&gt;ipython\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: a=[1,2,3]\n\nIn [2]: a\nOut[2]: [1, 2, 3]\n\nIn [3]: a+[4]\nOut[3]: [1, 2, 3, 4]\n- ?list가 가능\nIn [4]: ?list\nInit signature: list(iterable=(), /)\nDocstring:\nBuilt-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\nType:           type\nSubclasses:     _HashedSeq, StackSummary, DeferredConfigList, SList, _ImmutableLineList, FormattedText, NodeList, _ExplodedList, Stack, _Accumulator, ...\n\n- 색깔이 알록달록해서 문법을 보기 편하다. (구문강조)"
  },
  {
    "objectID": "posts/day1.html#ipython-으로-코딩하기",
    "href": "posts/day1.html#ipython-으로-코딩하기",
    "title": "Day1: 실습1 - 실습12",
    "section": "6. ipython 으로 코딩하기",
    "text": "6. ipython 으로 코딩하기\n- ipython을 사용한 프로그래머는 좀더 상황이 낫다\n(base) C:\\Users\\python&gt;ipython\nPython 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.29.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: total = 0\n\nIn [2]: for i in range(1,11):\n   ...:     total = total + i\n   ...:\n\nIn [3]: total\nOut[3]: 55"
  },
  {
    "objectID": "posts/day1.html#메모장-python",
    "href": "posts/day1.html#메모장-python",
    "title": "Day1: 실습1 - 실습12",
    "section": "7. 메모장 + python",
    "text": "7. 메모장 + python\n- 메모장을 키고 아래의 내용을 적는다.\ntotal = 0 \nfor i in range(1,11): \n    total = total + i\nprint(total)\n- 파일이름을 mysum.py로 저장한다.\n- anaconda prompt에서 mysum.py파일이 저장된 폴더로 이동 -&gt; 실행\n(base) C:\\Users\\python&gt;cd Desktop\n\n(base) C:\\Users\\python\\Desktop&gt;dir\n C 드라이브의 볼륨에는 이름이 없습니다.\n 볼륨 일련 번호: 9AFD-A05F\n\n C:\\Users\\python\\Desktop 디렉터리\n\n2022-03-27  오전 11:32    &lt;DIR&gt;          .\n2022-03-27  오전 11:32    &lt;DIR&gt;          ..\n2022-03-27  오전 12:01             2,306 Chrome.lnk\n2022-03-26  오후 08:32             2,332 Microsoft Edge.lnk\n2022-03-27  오전 11:33                71 mysum.py\n               3개 파일               4,709 바이트\n               2개 디렉터리  743,643,467,776 바이트 남음\n\n(base) C:\\Users\\python\\Desktop&gt;python mysum.py\n55\n\n(base) C:\\Users\\python\\Desktop&gt;\n- 소감 - 편한점1: 마우스를 이용하여 이동가능 - 편한점2: 내가 작업한 내용은 바탕화면의 메모장에 저장이 되어있음 - 아쉬운점: ipython의 장점은 활용못함 (구문강조, 도움말기능)"
  },
  {
    "objectID": "posts/day1.html#메모장-ipython",
    "href": "posts/day1.html#메모장-ipython",
    "title": "Day1: 실습1 - 실습12",
    "section": "8. 메모장 + ipython",
    "text": "8. 메모장 + ipython\n- 전체적인 개발방식 - 메모장: 코드를 편집, 저장 - ipython: anaconda prompt처럼 메모장의 코드를 실행하고 결과를 확인 + 구문강조, 도움말확인기능 등을 이용하여 짧은 코드를 빠르게 작성\n- 기능 - ipython에서 !python mysum.py를 입력하면 anaconda prompt에서 python mysum.py를 입력한 것과 같은 효과 - ipython에서 %run mysum을 입력하면 메모장에서 mysum.py에 입력된 내용을 복사해서 ipython에 붙여넣어 실행한것과 같은 효과"
  },
  {
    "objectID": "posts/day1.html#ide통합개발환경의-등장",
    "href": "posts/day1.html#ide통합개발환경의-등장",
    "title": "Day1: 실습1 - 실습12",
    "section": "9. IDE(통합개발환경)의 등장",
    "text": "9. IDE(통합개발환경)의 등장\n- 메모장과 ipython을 하나로 통합한 프로그램이 등장!\n\njupyter notebook, jupyter lab\nspyder\nidle\nVScode\n…\n\n- 주피터노트북, 혹은 주피터랩을 켜보자.\n\n셀에서 1+1 수행\n셀에서 !dir 등의 명령어 실행\n\n- 주피터의 트릭 (실제로 주피터는 ipython에 기생할 뿐 아무런 역할도 안해요)\n\n주피터를 실행\n새 노트북을 생성\n\n\n컴퓨터는 내부적으로 ipython을 실행하고 그 ipython이랑 여러분이 방금만든 그 노트북과 연결\n\n\n처음보이는 cell에 1+1을 입력 -&gt; 쉬프트엔터 -&gt; 결과2가 출력\n\n\n처음보이는 cell하나 = 자동으로 열린 하나의 메모장\ncell 1+1을 입력 = 메모장에 1+1을 적음\n쉬프트+엔터후 결과2를 출력 = cell의 내용을 복사 -&gt; ipython에 붙여넣음 -&gt; ipython 계산된 결과를 복사 -&gt; cell로 돌아와 붙여넣기\n\n\n새로운 cell을 추가하고 2+2을 입력 -&gt; 쉬프트엔터 -&gt; 결과4가 출력\n\n\n새로운 cell을 추가 = 새로운 메모장 추가\ncell 2+2을 입력 = 새로운 메모장에 2+2를 적음\n쉬프트+엔터후 결과4를 출력 = cell의 내용을 복사 -&gt; ipython에 붙여넣음 -&gt; ipython 계산된 결과를 복사 -&gt; cell로 돌아와 붙여넣기\n\n- 중요한 사실들 - IDE는 내부적으로 연산을 수행하는 능력이 없다. (생각해볼것: 왜 R을 꼭 설치하고 Rstudio를 설치해야 했을까?) - 주피터에서 커널을 재시작한다는 의미는 메모장이 열린채로 ipython을 껐다가 다시 실행한다는 의미 - 주피터는 단순히 ’메모장의 내용을 복사하여 붙여넣는 기계’라고 볼 수 있다. 이렇게 생각하면 주피터는 꼭 ipython에 연결할 이유는 없다. 실제로 주피터에 R을 연결해서 쓸 수 있다. 즉 하나의 IDE가 여러개의 언어와 연결될 수 있다. - Jupyterlab이라는 프로그램은 크롬에 있는 내용과 ipython간의 통신을 제어하는 프로그램일 뿐이다.\n\n\n\n\n\n\nWarning\n\n\n\n강의노트의 숨은의도: Language, Kernel, IDE 의 차이점을 이해했으면.."
  },
  {
    "objectID": "posts/day1.html#원격컴퓨터server-클라우드컴퓨터colab의-등장",
    "href": "posts/day1.html#원격컴퓨터server-클라우드컴퓨터colab의-등장",
    "title": "Day1: 실습1 - 실습12",
    "section": "10. 원격컴퓨터(server), 클라우드컴퓨터(colab)의 등장",
    "text": "10. 원격컴퓨터(server), 클라우드컴퓨터(colab)의 등장\n- 지금까지는 ipython이 실행되는 컴퓨터와 크롬이 실행되는 컴퓨터가 동일하다는 전제였음.\n- 생각해보니까 어차피 ipython이 실행된 컴퓨터에서 내가 크롬에 입력한 명령 “전달”되기만 하면 되므로 꼭 같은 컴퓨터일 필요는 없다.\n\nA. 모델1: 원격컴퓨터 (일대일)\n- 준비상태\n\n학과서버: ipython을 실행 + 이 컴퓨터는 인터넷 연결이 되어있어야함\n규빈노트북: 크롬실행 + 이 컴퓨터도 인터넷이 연결되어 있어야함\n\n- 명령입력\n\n규빈노트북의 크롬에서 1+1을 입력하고 쉬프트 엔터를 누름\n\n- 규빈노트북 -&gt; 학과서버\n\n규빈노트북의 내부의 어떤프로그램은 1+1이라는 명령을 복사하여 카카오톡으로 학과서버에 전달\n학과서버 내부의 어떤프로그램은 1+1이라는 명령을 카톡으로 받아서 그것을 ipython에게 전달\n\n- 학과서버 -&gt; 규빈노트북\n\n학과서버 내부의 ipython은 2라는 출력결과를 계산함\n학과서버 내부의 어떤프로그램은 계산결과를 카톡으로 규빈노트북에 알려줌\n규빈은 본인 노트북에서 편하게 계산결과를 받아볼 수 있다.\n\n\n\nB. 모델1: 원격컴퓨터 (일대다)\n- 개념: 2개 이상의 ipython 커널을 각각 다른 메모장에 연결가능.\n- 확장개념:\n\n2개 ipython 커널을 생성. 편의상 각각을 커널A,커널B라고 하자.\n커널A는 규빈노트북의 메모장에 커널B는 영미노트북의 메모장에 연결한다.\n영미와 규빈은 각각 독립적으로 작업가능\n\n- 의문?\n\n규빈은 python==3.10 을 쓰고 싶고 영미는 python==3.12 를 쓰고 싶다면??\n학과서버에 python==3.10 과 python==3.12 가 동시에 깔려야함.\n원래는 불가능하지만 “가상환경” 이라는 개념을 도입하면 가능하다. \\(\\to\\) 아나콘다의 등장\n\n\n\nC. 모델2: 클라우드 컴퓨터 (google colab)\n- 구글코랩\n\n구글에 여러가지 성능을 가진 컴퓨터가 \\(n\\)대 있음. 이 컴퓨터들을 연결하여 하나의 거대한 컴퓨터처럼 동작하게 만듦.\n이 컴퓨터는 학과서버처럼 동작함. 즉 여러명에게 컴퓨팅 자원을 분배함.\n\n- 구글코랩과 비슷한 방식으로 코드스페이스가 있음."
  },
  {
    "objectID": "posts/day1.html#원격제어-맥북",
    "href": "posts/day1.html#원격제어-맥북",
    "title": "Day1: 실습1 - 실습12",
    "section": "12. 원격제어 (맥북)",
    "text": "12. 원격제어 (맥북)\n- ssh를 이용한 접속\n- 질문: 여기서 파이썬을 키면? 어떤 컴퓨터 spec으로 계산될까?\n- 한계점: ssh는 동일네트워크내에서만 동작한다. (진짜?)"
  },
  {
    "objectID": "posts/day1.html#local-remote",
    "href": "posts/day1.html#local-remote",
    "title": "Day1: 실습1 - 실습12",
    "section": "13. local / remote",
    "text": "13. local / remote\n- local: 물리적으로 가까이 있음 + 네트워크 없이 접근\n\n강의실에 있는 윈도우 컴퓨터\n여러분이 가지고 있는 노트북\n\n- remote: 물리적으로 멀리 있음 + 네트워크를 통해 접근\n\n제서버1 (210.???.???.???)\n제서버2 (210.???.???.???)\n학과서버 (210.???.???.???)\n구글코랩\ncodespace\ngithub, google drive\n\n- 구분이 딱 떨어지는건 아님.. 그냥 아래의 정도로 이해하면 좋음\n\nlocal = 가까이\nremote = 멀리"
  },
  {
    "objectID": "posts/day1.html#실습실컴퓨터-sim-코드스페이스-sim-개인노트북",
    "href": "posts/day1.html#실습실컴퓨터-sim-코드스페이스-sim-개인노트북",
    "title": "Day1: 실습1 - 실습12",
    "section": "14. 실습실컴퓨터 \\(\\sim\\) 코드스페이스 \\(\\sim\\) 개인노트북",
    "text": "14. 실습실컴퓨터 \\(\\sim\\) 코드스페이스 \\(\\sim\\) 개인노트북\n\n우리의 두 번째 리눅스 서버 얻기 (첫 서버는 코랩아닐까요?)\n\n- 단계1: 실습실컴퓨터로 깃헙에 로그인\n\n깃헙이란? 그냥 구글드라이브 같이 파일을 저장하는 기능을 한다고 이해하자.. (틀린 설명입니다!)\n\n- 단계2: New repository 를 이용하여 새로운 저장소를 만들자. 저장소 이름은 아무거나..\n\n저장소란?? 말그대로 파일,폴더들을 저장할 수 있는 것\n쉽게 생각하면 그냥 “큰” 폴더임.\n윈도우로 치면 downloada, desktop, 이런폴더들..\n\n\n- 단계3: 만들어진 저장소를 기반으로 codespace 생성\n\nlocal = 실습실컴퓨터\nremote = codespace\n\n- 단계4: codespace에서 아래의 명렁어들을 순서대로 실행하고 무엇을 의미하는지 공부하자.\nls\nls -a \nls .\nls .. \nls sample\nmkdir asdf \nwget https://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-08-rcmd_anal.csv\ncp 2022-09-08-rcmd_anal.csv ./asdf \nls ./asdf \nrm 2022-09-08-rcmd_anal.csv \nrm -rf asdf \n명령어들을 linux_commands.txt에 저장하자.\n- 단계5: 개인노트북으로 깃헙로그인\n\nlocal = 개인노트북\nremote = codespace\n\n- 단계6: 다시 코드스페이스에 접근하여 study_list.ipynb 주피터노트북을 만들자. 리스트만드는 방법을 공부하자.\nlst = [1,2,3] \n- 단계7: study_dict.py파일을 만들자. dict만드는 방법을 공부하자.\n# 방법1\ndct1 = {'a':1, 'b':2, 'c':3}\n\n# 방법2\ndct2 = dict(a=1,b=2,c=3)\n# 퀴즈1: 다시 코드스페이스에 접근하여 test.ipynb 주피터노트북을 만들고 아래 경로에 존재하는 파일을 다운로드하라.\nhttps://raw.githubusercontent.com/guebin/DL2022/master/_notebooks/2022-09-08-rcmd_anal.csv\n현재폴더에서 asdf폴더를 만들고 다운로드한 파일을 asdf 폴더로 옮겨라.\n(풀이1)\n!wget ~ \n!mkdir ~\n!cp ~\n!rm ~\n(풀이2)\n!wget ~ \n!mkdir ~\n!mv ~\n(풀이3) – 사실 이거는 “asdf 폴더를 만들고 그안에 다운로드하는 방식”이라 문제에서 요구하는 동작이랑 좀 다르긴해요 (결과는 똑같지만)\n!mkdir ~\n!wget ~ \n#"
  },
  {
    "objectID": "posts/day1.html#코드스페이스-rightarrow-깃헙-rightarrow-코랩",
    "href": "posts/day1.html#코드스페이스-rightarrow-깃헙-rightarrow-코랩",
    "title": "Day1: 실습1 - 실습12",
    "section": "15. 코드스페이스 \\(\\rightarrow\\) 깃헙 \\(\\rightarrow\\) 코랩",
    "text": "15. 코드스페이스 \\(\\rightarrow\\) 깃헙 \\(\\rightarrow\\) 코랩\n- 코드스페이스에서 공부한 내용을 코랩에서 이어서 하고싶다.\n- 단계1: 코드스페이스에 접근\n\nlocal = 개인노트북\nremote = codespace\n\n- 단계2: 코드스페이스 \\(\\to\\) 깃헙 레포지토리\n\nlocal = codespace\nremote = github\n\n- 단계3: 코랩 \\(\\leftarrow\\) 깃헙 레포지토리\n\nlocal = colab\nremote = github\n\n!wget ~~~~~\n\n코랩에서 공부한 내용을 나중에 codespace에서 이어하려면 “코랩 \\(\\to\\) 깃헙” 의 과정이 가능해야함. 이건 다루지 않음.\n\n\n\n\n\n\n\nWarning\n\n\n\n강의노트의 숨은의도: local/remote 의 개념을 이해했으면.."
  },
  {
    "objectID": "posts/day1.html#깃헙-rightarrow-코드스페이스",
    "href": "posts/day1.html#깃헙-rightarrow-코드스페이스",
    "title": "Day1: 실습1 - 실습12",
    "section": "16. 깃헙 \\(\\rightarrow\\) 코드스페이스",
    "text": "16. 깃헙 \\(\\rightarrow\\) 코드스페이스\n- 깃헙과 구글드라이브의 첫번째 차이: 깃헙은 기본적으로 “공개” 되어 있음."
  },
  {
    "objectID": "posts/day1.html#깃헙추가기능1-블로그-업로드",
    "href": "posts/day1.html#깃헙추가기능1-블로그-업로드",
    "title": "Day1: 실습1 - 실습12",
    "section": "17. 깃헙추가기능1: 블로그 업로드",
    "text": "17. 깃헙추가기능1: 블로그 업로드\n- 깃헙과 구글드라이브의 두번째 차이: 깃헙은 단순한 저장소를 넘어 추가기능이 있음.\n- 클론\ngit clone ??\n- 몇 가지 변경\n\nindex.qmd 에서 자기소개 추가하기\n_quarto.yml에서 블로그 타이틀 설정하기\n\n- 변경사항 업데이트\ngit add .\ngit commit -m .\ngit push\nquarto publish --no-browser --no-prompt"
  },
  {
    "objectID": "posts/day1.html#리눅스명령어-hw",
    "href": "posts/day1.html#리눅스명령어-hw",
    "title": "Day1: 실습1 - 실습12",
    "section": "18. 리눅스명령어 (hw)",
    "text": "18. 리눅스명령어 (hw)\n- 숙제: hw1.ipynb 파일 열어서 풀어보세요\n- 공부한것을 바탕으로 포스트작성.\n---\ntitle: \"hw1 -- 여러가지 리눅스 명령어\"\nauthor: \"최규빈\"\ndate: \"12/26/2024\"\n---"
  },
  {
    "objectID": "posts/day1.html#vi-벼락치기",
    "href": "posts/day1.html#vi-벼락치기",
    "title": "Day1: 실습1 - 실습12",
    "section": "19. vi 벼락치기",
    "text": "19. vi 벼락치기\n- i, esc 차이점.\n- Vi를 이용하여 파일만들기, Vi를 이용하여 파일수정하기\n- 복사 & 붙여넣기\n- Vi에서 편집후 저장 후 종료, 그냥 종료, 강제종료\n- 찾기: /asdf \\(\\to\\) 엔터 \\(\\to\\) n / shift+n\n- 단어끝으로 이동=e, 단어처음으로 이동=b"
  },
  {
    "objectID": "posts/day1.html#업로드하기-귀찮지-않아요-.sh",
    "href": "posts/day1.html#업로드하기-귀찮지-않아요-.sh",
    "title": "Day1: 실습1 - 실습12",
    "section": "20. 업로드하기 귀찮지 않아요? .sh",
    "text": "20. 업로드하기 귀찮지 않아요? .sh"
  },
  {
    "objectID": "posts/day1.html#깃헙추가기능2-패키지-배포",
    "href": "posts/day1.html#깃헙추가기능2-패키지-배포",
    "title": "Day1: 실습1 - 실습12",
    "section": "21. 깃헙추가기능2: 패키지 배포",
    "text": "21. 깃헙추가기능2: 패키지 배포\n- 깃헙과 구글드라이브의 두번째 차이: 깃헙은 단순한 저장소를 넘어 추가기능이 있음.\n\n\n\n\n\n\nWarning\n\n\n\n강의노트의 숨은의도:\n\n깃헙에 대한 이해 (저장소의 의미, 패키지작성)\n리눅스에 대한 이해 (명령어, vi, .sh)"
  },
  {
    "objectID": "posts/day1.html#서버접속",
    "href": "posts/day1.html#서버접속",
    "title": "Day1: 실습1 - 실습12",
    "section": "22. 서버접속",
    "text": "22. 서버접속\n- 접속하기\nssh toolbox@210.117.173.182\n- 비밀번호는 jbnu"
  },
  {
    "objectID": "posts/day1.html#서버접속2-개인-노트북",
    "href": "posts/day1.html#서버접속2-개인-노트북",
    "title": "Day1: 실습1 - 실습12",
    "section": "23. 서버접속2 (개인 노트북)",
    "text": "23. 서버접속2 (개인 노트북)\n- 휴대폰 테더링으로 인터넷연결하고 본인 노트북으로 해보세요.\n- 실패할거에요"
  },
  {
    "objectID": "posts/day1.html#실습14-183-컴퓨터-접속-passwd",
    "href": "posts/day1.html#실습14-183-컴퓨터-접속-passwd",
    "title": "Day1: 실습1 - 실습12",
    "section": "실습14: 183 컴퓨터 접속 + passwd",
    "text": "실습14: 183 컴퓨터 접속 + passwd\n- 183번 컴퓨터에 접속하기\nssh ????@???.???.???.183 \n- 비밀번호 변경하기\npasswd"
  },
  {
    "objectID": "posts/day1.html#실습15-183에서-git의-설치-및-연결",
    "href": "posts/day1.html#실습15-183에서-git의-설치-및-연결",
    "title": "Day1: 실습1 - 실습12",
    "section": "실습15: 183에서 git의 설치 및 연결",
    "text": "실습15: 183에서 git의 설치 및 연결\nwhich git # git의 생성\nsudo apt-get install git # git 설치\nsudo apt-get remove git # git 삭제"
  },
  {
    "objectID": "posts/day1.html#실습16-183에서-quarto의-설치",
    "href": "posts/day1.html#실습16-183에서-quarto의-설치",
    "title": "Day1: 실습1 - 실습12",
    "section": "실습16: 183에서 quarto의 설치",
    "text": "실습16: 183에서 quarto의 설치\nwhich quarto \nwget https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.533/quarto-1.4.533-linux-amd64.deb\nsudo dpkg -i quarto-1.4.533-linux-amd64.deb \nsudo dpkg -r quarto"
  },
  {
    "objectID": "posts/day1.html#실습17-183에서-아나콘다-설치",
    "href": "posts/day1.html#실습17-183에서-아나콘다-설치",
    "title": "Day1: 실습1 - 실습12",
    "section": "실습17: 183에서 아나콘다 설치",
    "text": "실습17: 183에서 아나콘다 설치\n- https://www.anaconda.com/download &lt;- 여기서 다운받을 수 있는 주소 get 하세여\nbash Anaconda3-2019.03-Linux-x86_64.sh\n- 질문: Anaconda3와 git/quarto의 차이는?"
  },
  {
    "objectID": "posts/day1.html#실습18-183에서-주피터랩-설치",
    "href": "posts/day1.html#실습18-183에서-주피터랩-설치",
    "title": "Day1: 실습1 - 실습12",
    "section": "실습18: 183에서 주피터랩 설치",
    "text": "실습18: 183에서 주피터랩 설치\n- 가상환경 셋팅\nconda create py310 python=3.10 # 가상환경생성 \nconda activate py310 # 가상환경 활성화 \nconda install -c conda-forge jupyterlab # 주피터랩설치\n- 접속하는 방법1\njupyter lab --ip \"0.0.0.0\" --port {8,학번끝3자리}\n이후에\nhttp://127.0.0.1:8052/lab?token=???? 와 같은 주소 형식을 http://210.117.173.183:8052/lab?token=???? 와 같이 바꾸고 들어오세요\n- 접속하는 방법2\njupyter notebook password\n를 이용하여 passwd를 설정한 뒤 다시 아래를 실행\njupyter lab --ip \"0.0.0.0\" --port {8,학번끝3자리}"
  },
  {
    "objectID": "posts/day1.html#실습21-주피터노트북파일에-이미지-넣기",
    "href": "posts/day1.html#실습21-주피터노트북파일에-이미지-넣기",
    "title": "Day1: 실습1 - 실습12",
    "section": "실습21: 주피터노트북파일에 이미지 넣기",
    "text": "실습21: 주피터노트북파일에 이미지 넣기\n- 방법1\n\n!wget https://imgs.xkcd.com/comics/sandwich.png\n\n--2024-01-03 14:08:48--  https://imgs.xkcd.com/comics/sandwich.png\nResolving imgs.xkcd.com (imgs.xkcd.com)... 146.75.48.67, 2a04:4e42:7c::67\nConnecting to imgs.xkcd.com (imgs.xkcd.com)|146.75.48.67|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 11828 (12K) [image/png]\nSaving to: ‘sandwich.png’\n\nsandwich.png        100%[===================&gt;]  11.55K  --.-KB/s    in 0s      \n\n2024-01-03 14:08:48 (69.3 MB/s) - ‘sandwich.png’ saved [11828/11828]\n\n\n\n\n- 방법2\n\n- 방법3: 스크린샷"
  },
  {
    "objectID": "posts/day1.html#실습22-182-ssh차단-우회하기",
    "href": "posts/day1.html#실습22-182-ssh차단-우회하기",
    "title": "Day1: 실습1 - 실습12",
    "section": "실습22: 182 ssh차단 우회하기",
    "text": "실습22: 182 ssh차단 우회하기\n- 내용없음."
  },
  {
    "objectID": "posts/day1.html#실습25-186-컴퓨터-개발환경-셋팅하기-hw",
    "href": "posts/day1.html#실습25-186-컴퓨터-개발환경-셋팅하기-hw",
    "title": "Day1: 실습1 - 실습12",
    "section": "실습25: 186 컴퓨터 개발환경 셋팅하기 (HW)",
    "text": "실습25: 186 컴퓨터 개발환경 셋팅하기 (HW)\n- ref: https://guebin.github.io/MP2023/offline/231128.html\n여기에서 2-E, 2-G 빼고 하기"
  },
  {
    "objectID": "posts/day3.html",
    "href": "posts/day3.html",
    "title": "Day3: 실습26 - 실습40",
    "section": "",
    "text": "- 186에서 깃+깃헙연결할때 어려운점.\n\n토큰을 쳐야한다는게 어려움.\n윈도우에서는 직접로그인으로 인증했음. 코드스페이스에서는 별도의 인증과정이 필요없었음.\n일반서버에서는 토큰으로 해결해야함. (다른 방법도 있는데 그냥 이게 젤 편함)\n\n- 비밀번호 치는게 귀찮으면?\ngit config credential.helper store # 이걸실행하고 이후에 한번만 푸시하면 된다. \ngit add .\ngit commit -m . \ngit push"
  },
  {
    "objectID": "posts/day3.html#실습26-186-컴퓨터에서-깃깃헙연결하기",
    "href": "posts/day3.html#실습26-186-컴퓨터에서-깃깃헙연결하기",
    "title": "Day3: 실습26 - 실습40",
    "section": "",
    "text": "- 186에서 깃+깃헙연결할때 어려운점.\n\n토큰을 쳐야한다는게 어려움.\n윈도우에서는 직접로그인으로 인증했음. 코드스페이스에서는 별도의 인증과정이 필요없었음.\n일반서버에서는 토큰으로 해결해야함. (다른 방법도 있는데 그냥 이게 젤 편함)\n\n- 비밀번호 치는게 귀찮으면?\ngit config credential.helper store # 이걸실행하고 이후에 한번만 푸시하면 된다. \ngit add .\ngit commit -m . \ngit push"
  },
  {
    "objectID": "posts/day3.html#실습27-작업하던-블로그를-강의실-윈도우로-clone",
    "href": "posts/day3.html#실습27-작업하던-블로그를-강의실-윈도우로-clone",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습27: 작업하던 블로그를 강의실 윈도우로 clone",
    "text": "실습27: 작업하던 블로그를 강의실 윈도우로 clone\n- 아래를 실행하면 됩니당\ngit clone {repo-name} # 처음부터 새로만듦"
  },
  {
    "objectID": "posts/day3.html#실습28-블로그-생성원리-이해하기",
    "href": "posts/day3.html#실습28-블로그-생성원리-이해하기",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습28: 블로그 생성원리 이해하기",
    "text": "실습28: 블로그 생성원리 이해하기\n- 아래를 실행하고 git switch를 사용할시 무슨일이 생기는지 파악\n# git add . \n# git commit -m . # 이거 2개가 깃에서의 save 라고 생각하자. \ngit switch gh-pages\ngit switch main \n- 위의 과정을 반복해보면서 폴더를 관찰. 느낀점 서술\n- git switch gh-pages한 상태에서 폴더에 존재하는 html파일들을 열어볼 것."
  },
  {
    "objectID": "posts/day3.html#실습29-블로그-깨기",
    "href": "posts/day3.html#실습29-블로그-깨기",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습29: 블로그 깨기",
    "text": "실습29: 블로그 깨기\n- git swtich gh-pages한 상태에서 폴더에 존재하는 모든 파일을 삭제 \\(\\to\\) 본인 홈페이지에 가보자. 홈페이지는 살아 있는가?\n- 아래를 실행하고 본인홈페이지에 방문해보자. 홈페이지는 살아있는가?\ngit add . \ngit commit -m .\ngit push\n- 왜 죽었다고 생각하는가?\n- 깃헙 특수기능 중 하나인 웹페이지 배포능력에 대하여 스스로 이해한 바를 서술해보자."
  },
  {
    "objectID": "posts/day3.html#실습30-코드를-숨기는-블로그-야메",
    "href": "posts/day3.html#실습30-코드를-숨기는-블로그-야메",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습30: 코드를 숨기는 블로그 (야메)",
    "text": "실습30: 코드를 숨기는 블로그 (야메)\n- 주피터다운로드 후 블로그를 만드는 것은 포스트를 엄청 빠르게 만드는 사기적 능력임\n\nhttps://scikit-learn.org/stable/auto_examples/index.html\nhttps://matplotlib.org/stable/gallery/index.html\n\n- 내가 베낄때는 좋지만 누군가가 내 블로그를 베낀다 생각하면 기분나쁠 수 있음\n- 실습29를 응용하여 코드가 없는 블로그를 만들어보자"
  },
  {
    "objectID": "posts/day3.html#실습31-코드를-숨기는-블로그-합법",
    "href": "posts/day3.html#실습31-코드를-숨기는-블로그-합법",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습31: 코드를 숨기는 블로그 (합법)",
    "text": "실습31: 코드를 숨기는 블로그 (합법)\n- 의문점: 그런데 작업내용을 블로그에 올릴때 꼭\ngit add . \ngit commit -m . \ngit push\nquarto publish --no-browser --no-prompt\n순서로 업로드 해야하는가? 그냥 단순히\nquarto publish --no-browser --no-prompt\n만 하면 안되는가? (경험상 되던데요?)\n- 코드를 숨길 수 있는 블로그를 만들고 싶다면? 어떻게 하면 좋을지 생각해보자."
  },
  {
    "objectID": "posts/day3.html#실습32-pull-push-잘-쓰면-편해",
    "href": "posts/day3.html#실습32-pull-push-잘-쓰면-편해",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습32: pull + push (잘 쓰면 편해)",
    "text": "실습32: pull + push (잘 쓰면 편해)\n- 186 컴퓨터 (혹은 본인이 주로 쓰는 서버 컴퓨터) 에서 pull\n- 186 컴퓨터에서 수정 \\(\\to\\) push\n- 실습실 컴퓨터에서 다시 pull\n- 실습실 컴퓨터에서 수정 \\(\\to\\) push\n- 소감:"
  },
  {
    "objectID": "posts/day3.html#실습33-pull-push-난-불편해",
    "href": "posts/day3.html#실습33-pull-push-난-불편해",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습33: pull + push (난 불편해)",
    "text": "실습33: pull + push (난 불편해)\n- 186 컴퓨터 (혹은 본인이 주로 쓰는 서버 컴퓨터) 에서 pull\n- 186 컴퓨터에서 수정 \\(\\to\\) push 안함\n- 실습실 컴퓨터에서 수정 \\(\\to\\) push\n- 186컴퓨터는 뭐야? \\(\\to\\) push 시도.. \\(\\to\\) 실패\n- 해결책:"
  },
  {
    "objectID": "posts/day3.html#실습34-gh-pages에서-만들기-싫다면..",
    "href": "posts/day3.html#실습34-gh-pages에서-만들기-싫다면..",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습34: gh-pages에서 만들기 싫다면..?",
    "text": "실습34: gh-pages에서 만들기 싫다면..?\n- 생각해보니까 딱히 내 코드가 비밀은 아님\n- 브랜치를 쓰는게 이론상 깔끔하긴 한데 막상 쓰려니까 불편함. (그 파일이 순간적으로 없어지는 거잖아요?.. 엄청 찝찝해요)\n- quarto publish는 아래동작의 결합이다.\nquarto render \n# html파일들이 어딘가 만들어져있음. \ngit switch gh-pages\n# 만들어진 html파일들이 복사됨. \ngit add .\ngit commit -m . \ngit push \ngit switch main \n- 아래와 같이 수정하고 싶다면?\nquarto render \n# html파일들을 docs라는 폴더에 저장\ngit add .\ngit commit -m . \ngit push \n그리고 깃헙설정을 변경한다면?\n- 하는방법\nstep1\ngit push origin --delete gh-pages # 로칼에서 브랜치삭제 + 원격으로 업데이트\ngit add .\ngit commit -m .\ngit push \nstep2\n\n\n_quarto.yml\n\nproject:\n  type: website\n  output-dir: docs # &lt;- 이거 추가하세요\n# 이 아래는 수정필요없음 \n\nstep3\n이후 https://github.com/{user-name}/{repo-name}/settings/pages 로 이동하여 셋팅을 변경하면 된다."
  },
  {
    "objectID": "posts/day3.html#실습35-파이썬-버전확인하기",
    "href": "posts/day3.html#실습35-파이썬-버전확인하기",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습35: 파이썬 버전확인하기",
    "text": "실습35: 파이썬 버전확인하기\n- 기본명령\npython --version \n- 이걸 이용해서 코랩의 파이썬 버전을 확인해보자."
  },
  {
    "objectID": "posts/day3.html#실습36-가상환경-py310생성-pip으로-판다스-설치하고-버전확인",
    "href": "posts/day3.html#실습36-가상환경-py310생성-pip으로-판다스-설치하고-버전확인",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습36: 가상환경 py310생성 + pip으로 판다스 설치하고 버전확인",
    "text": "실습36: 가상환경 py310생성 + pip으로 판다스 설치하고 버전확인\n- 우리의 무기1: pip list\npip list \nPackage    Version\n---------- -------\npip        23.3.1\nsetuptools 68.2.2\nwheel      0.41.2\n- 우리의 무기2: conda list\nconda list \n# packages in environment at /root/anaconda3/envs/py310:\n#\n# Name                    Version                   Build  Channel\n_libgcc_mutex             0.1                        main  \n_openmp_mutex             5.1                       1_gnu  \nbzip2                     1.0.8                h7b6447c_0  \nca-certificates           2023.12.12           h06a4308_0  \nld_impl_linux-64          2.38                 h1181459_1  \nlibffi                    3.4.4                h6a678d5_0  \nlibgcc-ng                 11.2.0               h1234567_1  \nlibgomp                   11.2.0               h1234567_1  \nlibstdcxx-ng              11.2.0               h1234567_1  \nlibuuid                   1.41.5               h5eee18b_0  \nncurses                   6.4                  h6a678d5_0  \nopenssl                   3.0.12               h7f8727e_0  \npip                       23.3.1          py310h06a4308_0  \npython                    3.10.13              h955ad1f_0  \nreadline                  8.2                  h5eee18b_0  \nsetuptools                68.2.2          py310h06a4308_0  \nsqlite                    3.41.2               h5eee18b_0  \ntk                        8.6.12               h1ccaba5_0  \ntzdata                    2023c                h04d1e81_0  \nwheel                     0.41.2          py310h06a4308_0  \nxz                        5.4.5                h5eee18b_0  \nzlib                      1.2.13               h5eee18b_0  \n- 판다스의 설치\npip install pandas # 터미널에서 하는게 적성입니다. 나머지 야메에요\n- pip list로 확인\nPackage         Version\n--------------- ------------\nnumpy           1.26.3\npandas          2.1.4\npip             23.3.1\npython-dateutil 2.8.2\npytz            2023.3.post1\nsetuptools      68.2.2\nsix             1.16.0\ntzdata          2023.4\nwheel           0.41.2\n- conda list로 확인\n# packages in environment at /root/anaconda3/envs/py310:\n#\n# Name                    Version                   Build  Channel\n_libgcc_mutex             0.1                        main  \n_openmp_mutex             5.1                       1_gnu  \nbzip2                     1.0.8                h7b6447c_0  \nca-certificates           2023.12.12           h06a4308_0  \nld_impl_linux-64          2.38                 h1181459_1  \nlibffi                    3.4.4                h6a678d5_0  \nlibgcc-ng                 11.2.0               h1234567_1  \nlibgomp                   11.2.0               h1234567_1  \nlibstdcxx-ng              11.2.0               h1234567_1  \nlibuuid                   1.41.5               h5eee18b_0  \nncurses                   6.4                  h6a678d5_0  \nnumpy                     1.26.3                   pypi_0    pypi\nopenssl                   3.0.12               h7f8727e_0  \npandas                    2.1.4                    pypi_0    pypi\npip                       23.3.1          py310h06a4308_0  \npython                    3.10.13              h955ad1f_0  \npython-dateutil           2.8.2                    pypi_0    pypi\npytz                      2023.3.post1             pypi_0    pypi\nreadline                  8.2                  h5eee18b_0  \nsetuptools                68.2.2          py310h06a4308_0  \nsix                       1.16.0                   pypi_0    pypi\nsqlite                    3.41.2               h5eee18b_0  \ntk                        8.6.12               h1ccaba5_0  \ntzdata                    2023.4                   pypi_0    pypi\nwheel                     0.41.2          py310h06a4308_0  \nxz                        5.4.5                h5eee18b_0  \nzlib                      1.2.13               h5eee18b_0  \n- 방법3: 파이썬에서\nimport pandas as pd\npd.__version__"
  },
  {
    "objectID": "posts/day3.html#실습37-저의-가장-최신-흑역사-재현",
    "href": "posts/day3.html#실습37-저의-가장-최신-흑역사-재현",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습37: 저의 가장 최신 흑역사 재현",
    "text": "실습37: 저의 가장 최신 흑역사 재현\n- 기억하고 싶지 않았음: https://guebin.github.io/DV2023/posts/13wk-2.html\n- py310 환경에서 아래의 코드를 실행한다.\ndf = pd.DataFrame({'A':[2143,2143],'B':['-',3456]})\ndf.map(lambda x: 0 if x == '-' else x)\n- colab 환경의 python과 pandas 버전을 조사하고 유사환경을 만든다.\n# 이렇게 하면됩니당\nconda create -n co python=3.10.12\nconda activate co \npip install pandas==1.5.3\n- 아래의 코드를 실행해보자.\ndf = pd.DataFrame({'A':[2143,2143],'B':['-',3456]})\ndf.map(lambda x: 0 if x == '-' else x)\n- 학생들 질문: 제 컴퓨터에서는 안되는데요.. 어쩌죠?\n\n답변1: 코랩에서 하세요..\n\n- 학생들 질문2: pip install pandas 해도 안되는데요, 어쩌죠?\n\n답변1: 코랩해서 하세요..\n진짜 많이 겪는 상황: 저는 꼭 제 노트북으로 해야겠습니다.. -&gt; 아나콘다 쓰시나요? -&gt; 쓰긴쓰는데…….. -&gt; 환경분리해서 실습했어요? -&gt; ????? -&gt; 제가 볼게요.. (찾아보니까) base에 있음..\n답변2: 일단은 pip install pandas -U 해보세요\n\n- 답변2가 적절할까?\n- 가장 좋아하는 답변: 환경 새로 파세요\n- 최악의 상황\n\n일단 아나콘다는 깔아놓았음.\n잘 몰라서 (base) 상태에서 이것저것 깔기 시작함.\n교수랑 코드 “똑.같.이.” 쳤는데 내 컴퓨터에서는 안됨.\n교수가 맥이라서 그런가보다 하고 인터넷에서 해결책 찾기 시작함.\n뭐 하라는 대로 해서 이제까지 해결해 왔음. (버전은 점점 엉키기 시작함)\n안되는건 잘하는 선배찾아가서 물어봤는데 귀신같이 해결해줌. (하지만 버전은 점점 더 엉키고 있음)\n그런데 또 문제가 생겼고 이제는 해결못하겠음.\n교수한테 찾아감 -&gt; 교수가 해준다면서 (base)에서 새로운 환경 (py310)을 만들어서 이것저것 시도해 봄.\n성공하면 다행인데, 실패함1\n이건 방법이 없다며 아나콘다를 지우고 재설치 시도. 그런데 윈도우에서는 아나콘다 지우는게 까다로움. (먼가 설정이 자꾸 남아있단 말이에요)\n새로 계정만들어서 아나콘다 설치시도 -&gt; 실패\n교수도 사실 윈도우 잘 모른다고 하면서 회피.\n포맷\n다시 아나콘다 깔고 1-13을 반복함.\n\n- 부작용: 아나콘다 트라우마 발생해서 “리눅스에서 쓰는 모든 명령” 을 (base) 상태에서 실행해야하는지 (py310) 상태에서 실행해야 하는지 알고 싶어하고, 그게 명확하지 않을 경우 두려워함.\n- 부작용을 극복하는 방법: 서버사용하세요. 막 쓰세요. 컴퓨터 망가뜨리면 찾아오세요. 모든 자료는 언제든 클론가능하게 깃헙에 저장하세요."
  },
  {
    "objectID": "posts/day3.html#실습38-여러개의-가상환경-생성",
    "href": "posts/day3.html#실습38-여러개의-가상환경-생성",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습38: 여러개의 가상환경 생성",
    "text": "실습38: 여러개의 가상환경 생성\n- 가능하면 프로젝트별로 환경을 분리하는게 좋다.\n- 하나의 환경에 모든 패키지를 때려밖아 설치하는건 패키지 충돌나라고 기도하는 꼴이다."
  },
  {
    "objectID": "posts/day3.html#실습39-주피터랩-설정변경",
    "href": "posts/day3.html#실습39-주피터랩-설정변경",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습39: 주피터랩 설정변경",
    "text": "실습39: 주피터랩 설정변경\n- root유저의 홈에서 ls, ls -a를 쳐보자.\n- 들어가서 jupyter_notebook_config.py를 열어보자.\n없다면 아래를 이용하여 만들자.\njupyter notebook --generate-config\n- 아래의 내용을 변경\nc.NotebookApp.ip = '0.0.0.0'\nc.NotebookApp.port = 8888 # 8888아니구요. 본인이 쓸수 있는 포트중에서 좋아하는거 쓰세여 \nc.NotebookApp.allow_root = True \nc.NotebookApp.allow_remote_access = True # 당장필요한건 아닌데요.. 해놓으세여 \n- 이제 켜보세요..\njupyter lab"
  },
  {
    "objectID": "posts/day3.html#실습40-주피터랩-평생-켜놓기",
    "href": "posts/day3.html#실습40-주피터랩-평생-켜놓기",
    "title": "Day3: 실습26 - 실습40",
    "section": "실습40: 주피터랩 평생 켜놓기",
    "text": "실습40: 주피터랩 평생 켜놓기\n- 아래와 같이 하면 됩니다.\nnohup jupyter lab --ip=\"0.0.0.0\" --port={MY-PORT} --allow-root &gt; /dev/null 2&gt;&1 &"
  },
  {
    "objectID": "posts/day3.html#footnotes",
    "href": "posts/day3.html#footnotes",
    "title": "Day3: 실습26 - 실습40",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n4학년쯤에는 이미 (base) 가 손쓸 수 없는 상태로 깨져있는 경우가 허다함. 공부를 열심히 한 학생일수록 그러함. 이럴경우 소생가능성이 없음↩︎"
  },
  {
    "objectID": "posts/day2.html",
    "href": "posts/day2.html",
    "title": "Day2: 실습13 - 실습25",
    "section": "",
    "text": "- 이거 클론하세요\n- 방법1\n\n!ls ../day1hw \n\nbaek_gm.txt   guebin.txt     jinsil.txt   seongjoon.txt\nchoyun.txt    handoehee.txt  junhan.txt   seunghoon.txt\ncoco.txt      hyeonji.txt    leejjae.txt  soonwon.txt\ndaehyeon.txt  jeongmin.txt   mingu.txt    suwhan.txt\n\n\n\n!cat ../day1hw/baek_gm.txt\n\ngithub : https://github.com/baekgyeongmin\nblog : https://baekgyeongmin.github.io/blogggg/\n201821967 백경민\n\n\n\n!cat ../day1hw/choyun.txt\n\ngithub : https://github.com/jeongchoyun\n202350543 정초윤 https://jeongchoyun.github.io/TBX2024/\n\n\n- 방법2\n\n!ls ../day1hw &gt; fnames.txt \n\n\n!chmod +x show.sh\n\n\n!./show.sh\n\ngithub : https://github.com/baekgyeongmin\nblog : https://baekgyeongmin.github.io/blogggg/\n201821967 백경민\ngithub : https://github.com/jeongchoyun\n202350543 정초윤 https://jeongchoyun.github.io/TBX2024/\ncoco(김보람),202250926, https://github.com/boram-coco, https://boram-coco.io/240102\ndaehyeon\n201319536\ngithub:https://github.com/kobron\n최규빈,2021-43052,https://github.com/guebin,https://guebin.github.io/DSTBX2023/\n한도희\n지구환경과학과\n201916288\nhttps://github.com/handoehee\n전현지\n201918834\ngithub.com/hyeonji07\nhttps://hyeonji07.github.io/blog_last/\nijeongmin 202115820\ngithub =&gt; https://github.com/amondmomo\n이정민\nhttps://amondmomo.github.io/blog_test/ \n김진실\n201920273\nhttps://github.com/jinisili\nhttps://jinisili.github.io/blog-please\n전준한,2020-16239,https://github.com/Pogjunan\n\nquarto blog 제작중입니다.\n\nleejeongjae 202021333 https://github.com/leejjae, https://leejjae.github.io/blog_test/\n강민구, 2023-50653, https://github.com/min9kan9, https://min9kan9.github.io/blog5/\n유성준,201810648,\nhttps://sjoon0305.github.io/blog_test2/\n양승훈 201916332 https://github.com/yangsh12\n\n권순원 201816897 https://github.com/sw1kwon\n201916240 김수환 https://github.com/swany00\n\n\n- 방법3: 아래의 파일을 생성하고 출력\n\n\nshow2.sh\n\nfnames=(\n    \"baek_gm.txt\" \"guebin.txt\" \"jinsil.txt\" \"seongjoon.txt\"\n    \"choyun.txt\" \"handoehee.txt\" \"junhan.txt\" \"seunghoon.txt\"\n    \"coco.txt\" \"hyeonji.txt\" \"leejjae.txt\" \"soonwon.txt\"\n    \"daehyeon.txt\" \"jeongmin.txt\" \"mingu.txt\" \"suwhan.txt\"\n)\nfor fname in \"${fnames[@]}\"; do\n    echo \"File: $fname\"\n    cat \"../day1hw/$fname\"\n    echo \"----------------\"\ndone\n\n\n#!bash show2.sh\n\n- ./show2.sh 와 bash show2.sh 의 차이?\n\n스크립트의 권한, 셸 지정\n잘 모르겠어요\n\n\n저 숙제를 바탕으로 183 컴퓨터에 계정을 생성했습니다.\n계정을 생성한 방법: 그냥 참고용.. 이렇게도 가능함 ㅎㅎ\n\n!ls ../day1hw/\n\nbaek_gm.txt   guebin.txt     jinsil.txt   seongjoon.txt\nchoyun.txt    handoehee.txt  junhan.txt   seunghoon.txt\ncoco.txt      hyeonji.txt    leejjae.txt  soonwon.txt\ndaehyeon.txt  jeongmin.txt   mingu.txt    suwhan.txt\n\n\n\nfile_names = [\n    \"baek_gm\", \"guebin\", \"jinsil\", \"seongjoon\",\n    \"choyun\", \"handoehee\", \"junhan\", \"seunghoon\",\n    \"coco\", \"hyeonji\", \"leejjae\", \"soonwon\",\n    \"daehyeon\", \"jeongmin\", \"mingu\", \"suwhan\"\n]\n\n\nfor username in file_names:\n    print(f'adduser {username} --gecos \"\" --disabled-password && echo \"{username}:jbnu\" | chpasswd && usermod -aG sudo {username}')\n\nadduser baek_gm --gecos \"\" --disabled-password && echo \"baek_gm:jbnu\" | chpasswd && usermod -aG sudo baek_gm\nadduser guebin --gecos \"\" --disabled-password && echo \"guebin:jbnu\" | chpasswd && usermod -aG sudo guebin\nadduser jinsil --gecos \"\" --disabled-password && echo \"jinsil:jbnu\" | chpasswd && usermod -aG sudo jinsil\nadduser seongjoon --gecos \"\" --disabled-password && echo \"seongjoon:jbnu\" | chpasswd && usermod -aG sudo seongjoon\nadduser choyun --gecos \"\" --disabled-password && echo \"choyun:jbnu\" | chpasswd && usermod -aG sudo choyun\nadduser handoehee --gecos \"\" --disabled-password && echo \"handoehee:jbnu\" | chpasswd && usermod -aG sudo handoehee\nadduser junhan --gecos \"\" --disabled-password && echo \"junhan:jbnu\" | chpasswd && usermod -aG sudo junhan\nadduser seunghoon --gecos \"\" --disabled-password && echo \"seunghoon:jbnu\" | chpasswd && usermod -aG sudo seunghoon\nadduser coco --gecos \"\" --disabled-password && echo \"coco:jbnu\" | chpasswd && usermod -aG sudo coco\nadduser hyeonji --gecos \"\" --disabled-password && echo \"hyeonji:jbnu\" | chpasswd && usermod -aG sudo hyeonji\nadduser leejjae --gecos \"\" --disabled-password && echo \"leejjae:jbnu\" | chpasswd && usermod -aG sudo leejjae\nadduser soonwon --gecos \"\" --disabled-password && echo \"soonwon:jbnu\" | chpasswd && usermod -aG sudo soonwon\nadduser daehyeon --gecos \"\" --disabled-password && echo \"daehyeon:jbnu\" | chpasswd && usermod -aG sudo daehyeon\nadduser jeongmin --gecos \"\" --disabled-password && echo \"jeongmin:jbnu\" | chpasswd && usermod -aG sudo jeongmin\nadduser mingu --gecos \"\" --disabled-password && echo \"mingu:jbnu\" | chpasswd && usermod -aG sudo mingu\nadduser suwhan --gecos \"\" --disabled-password && echo \"suwhan:jbnu\" | chpasswd && usermod -aG sudo suwhan"
  },
  {
    "objectID": "posts/day2.html#실습13-숙제검사",
    "href": "posts/day2.html#실습13-숙제검사",
    "title": "Day2: 실습13 - 실습25",
    "section": "",
    "text": "- 이거 클론하세요\n- 방법1\n\n!ls ../day1hw \n\nbaek_gm.txt   guebin.txt     jinsil.txt   seongjoon.txt\nchoyun.txt    handoehee.txt  junhan.txt   seunghoon.txt\ncoco.txt      hyeonji.txt    leejjae.txt  soonwon.txt\ndaehyeon.txt  jeongmin.txt   mingu.txt    suwhan.txt\n\n\n\n!cat ../day1hw/baek_gm.txt\n\ngithub : https://github.com/baekgyeongmin\nblog : https://baekgyeongmin.github.io/blogggg/\n201821967 백경민\n\n\n\n!cat ../day1hw/choyun.txt\n\ngithub : https://github.com/jeongchoyun\n202350543 정초윤 https://jeongchoyun.github.io/TBX2024/\n\n\n- 방법2\n\n!ls ../day1hw &gt; fnames.txt \n\n\n!chmod +x show.sh\n\n\n!./show.sh\n\ngithub : https://github.com/baekgyeongmin\nblog : https://baekgyeongmin.github.io/blogggg/\n201821967 백경민\ngithub : https://github.com/jeongchoyun\n202350543 정초윤 https://jeongchoyun.github.io/TBX2024/\ncoco(김보람),202250926, https://github.com/boram-coco, https://boram-coco.io/240102\ndaehyeon\n201319536\ngithub:https://github.com/kobron\n최규빈,2021-43052,https://github.com/guebin,https://guebin.github.io/DSTBX2023/\n한도희\n지구환경과학과\n201916288\nhttps://github.com/handoehee\n전현지\n201918834\ngithub.com/hyeonji07\nhttps://hyeonji07.github.io/blog_last/\nijeongmin 202115820\ngithub =&gt; https://github.com/amondmomo\n이정민\nhttps://amondmomo.github.io/blog_test/ \n김진실\n201920273\nhttps://github.com/jinisili\nhttps://jinisili.github.io/blog-please\n전준한,2020-16239,https://github.com/Pogjunan\n\nquarto blog 제작중입니다.\n\nleejeongjae 202021333 https://github.com/leejjae, https://leejjae.github.io/blog_test/\n강민구, 2023-50653, https://github.com/min9kan9, https://min9kan9.github.io/blog5/\n유성준,201810648,\nhttps://sjoon0305.github.io/blog_test2/\n양승훈 201916332 https://github.com/yangsh12\n\n권순원 201816897 https://github.com/sw1kwon\n201916240 김수환 https://github.com/swany00\n\n\n- 방법3: 아래의 파일을 생성하고 출력\n\n\nshow2.sh\n\nfnames=(\n    \"baek_gm.txt\" \"guebin.txt\" \"jinsil.txt\" \"seongjoon.txt\"\n    \"choyun.txt\" \"handoehee.txt\" \"junhan.txt\" \"seunghoon.txt\"\n    \"coco.txt\" \"hyeonji.txt\" \"leejjae.txt\" \"soonwon.txt\"\n    \"daehyeon.txt\" \"jeongmin.txt\" \"mingu.txt\" \"suwhan.txt\"\n)\nfor fname in \"${fnames[@]}\"; do\n    echo \"File: $fname\"\n    cat \"../day1hw/$fname\"\n    echo \"----------------\"\ndone\n\n\n#!bash show2.sh\n\n- ./show2.sh 와 bash show2.sh 의 차이?\n\n스크립트의 권한, 셸 지정\n잘 모르겠어요\n\n\n저 숙제를 바탕으로 183 컴퓨터에 계정을 생성했습니다.\n계정을 생성한 방법: 그냥 참고용.. 이렇게도 가능함 ㅎㅎ\n\n!ls ../day1hw/\n\nbaek_gm.txt   guebin.txt     jinsil.txt   seongjoon.txt\nchoyun.txt    handoehee.txt  junhan.txt   seunghoon.txt\ncoco.txt      hyeonji.txt    leejjae.txt  soonwon.txt\ndaehyeon.txt  jeongmin.txt   mingu.txt    suwhan.txt\n\n\n\nfile_names = [\n    \"baek_gm\", \"guebin\", \"jinsil\", \"seongjoon\",\n    \"choyun\", \"handoehee\", \"junhan\", \"seunghoon\",\n    \"coco\", \"hyeonji\", \"leejjae\", \"soonwon\",\n    \"daehyeon\", \"jeongmin\", \"mingu\", \"suwhan\"\n]\n\n\nfor username in file_names:\n    print(f'adduser {username} --gecos \"\" --disabled-password && echo \"{username}:jbnu\" | chpasswd && usermod -aG sudo {username}')\n\nadduser baek_gm --gecos \"\" --disabled-password && echo \"baek_gm:jbnu\" | chpasswd && usermod -aG sudo baek_gm\nadduser guebin --gecos \"\" --disabled-password && echo \"guebin:jbnu\" | chpasswd && usermod -aG sudo guebin\nadduser jinsil --gecos \"\" --disabled-password && echo \"jinsil:jbnu\" | chpasswd && usermod -aG sudo jinsil\nadduser seongjoon --gecos \"\" --disabled-password && echo \"seongjoon:jbnu\" | chpasswd && usermod -aG sudo seongjoon\nadduser choyun --gecos \"\" --disabled-password && echo \"choyun:jbnu\" | chpasswd && usermod -aG sudo choyun\nadduser handoehee --gecos \"\" --disabled-password && echo \"handoehee:jbnu\" | chpasswd && usermod -aG sudo handoehee\nadduser junhan --gecos \"\" --disabled-password && echo \"junhan:jbnu\" | chpasswd && usermod -aG sudo junhan\nadduser seunghoon --gecos \"\" --disabled-password && echo \"seunghoon:jbnu\" | chpasswd && usermod -aG sudo seunghoon\nadduser coco --gecos \"\" --disabled-password && echo \"coco:jbnu\" | chpasswd && usermod -aG sudo coco\nadduser hyeonji --gecos \"\" --disabled-password && echo \"hyeonji:jbnu\" | chpasswd && usermod -aG sudo hyeonji\nadduser leejjae --gecos \"\" --disabled-password && echo \"leejjae:jbnu\" | chpasswd && usermod -aG sudo leejjae\nadduser soonwon --gecos \"\" --disabled-password && echo \"soonwon:jbnu\" | chpasswd && usermod -aG sudo soonwon\nadduser daehyeon --gecos \"\" --disabled-password && echo \"daehyeon:jbnu\" | chpasswd && usermod -aG sudo daehyeon\nadduser jeongmin --gecos \"\" --disabled-password && echo \"jeongmin:jbnu\" | chpasswd && usermod -aG sudo jeongmin\nadduser mingu --gecos \"\" --disabled-password && echo \"mingu:jbnu\" | chpasswd && usermod -aG sudo mingu\nadduser suwhan --gecos \"\" --disabled-password && echo \"suwhan:jbnu\" | chpasswd && usermod -aG sudo suwhan"
  },
  {
    "objectID": "posts/day2.html#실습14-183-컴퓨터-접속-passwd",
    "href": "posts/day2.html#실습14-183-컴퓨터-접속-passwd",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습14: 183 컴퓨터 접속 + passwd",
    "text": "실습14: 183 컴퓨터 접속 + passwd\n- 183번 컴퓨터에 접속하기\nssh ????@???.???.???.183 \n- 비밀번호 변경하기\npasswd"
  },
  {
    "objectID": "posts/day2.html#실습15-183에서-git의-설치-및-연결",
    "href": "posts/day2.html#실습15-183에서-git의-설치-및-연결",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습15: 183에서 git의 설치 및 연결",
    "text": "실습15: 183에서 git의 설치 및 연결\nwhich git # git의 생성\nsudo apt-get install git # git 설치\nsudo apt-get remove git # git 삭제"
  },
  {
    "objectID": "posts/day2.html#실습16-183에서-quarto의-설치",
    "href": "posts/day2.html#실습16-183에서-quarto의-설치",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습16: 183에서 quarto의 설치",
    "text": "실습16: 183에서 quarto의 설치\nwhich quarto \nwget https://github.com/quarto-dev/quarto-cli/releases/download/v1.4.533/quarto-1.4.533-linux-amd64.deb\nsudo dpkg -i quarto-1.4.533-linux-amd64.deb \nsudo dpkg -r quarto"
  },
  {
    "objectID": "posts/day2.html#실습17-183에서-아나콘다-설치",
    "href": "posts/day2.html#실습17-183에서-아나콘다-설치",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습17: 183에서 아나콘다 설치",
    "text": "실습17: 183에서 아나콘다 설치\n- https://www.anaconda.com/download &lt;- 여기서 다운받을 수 있는 주소 get 하세여\nbash Anaconda3-2019.03-Linux-x86_64.sh\n- 질문: Anaconda3와 git/quarto의 차이는?"
  },
  {
    "objectID": "posts/day2.html#실습18-183에서-주피터랩-설치",
    "href": "posts/day2.html#실습18-183에서-주피터랩-설치",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습18: 183에서 주피터랩 설치",
    "text": "실습18: 183에서 주피터랩 설치\n- 가상환경 셋팅\nconda create py310 python=3.10 # 가상환경생성 \nconda activate py310 # 가상환경 활성화 \nconda install -c conda-forge jupyterlab # 주피터랩설치\nconda install -c conda-forge notebook # 노트북설치 \n- 접속하는 방법1\njupyter lab --ip \"0.0.0.0\" --port {8,학번끝3자리}\n이후에\nhttp://127.0.0.1:8052/lab?token=???? 와 같은 주소 형식을 http://210.117.173.183:8052/lab?token=???? 와 같이 바꾸고 들어오세요\n- 접속하는 방법2\njupyter notebook password\n를 이용하여 passwd를 설정한 뒤 다시 아래를 실행\njupyter lab --ip \"0.0.0.0\" --port {8,학번끝3자리}"
  },
  {
    "objectID": "posts/day2.html#실습19-1일차-숙제-쉽게-하는-방법",
    "href": "posts/day2.html#실습19-1일차-숙제-쉽게-하는-방법",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습19: 1일차 숙제 쉽게 하는 방법",
    "text": "실습19: 1일차 숙제 쉽게 하는 방법\n- 숙제위치: https://guebin.github.io/IP2022/2022/03/28/(4주차)-3월28일.html\n- 깃헙에서 홈페이지 만들경우 대응하는 레포지토리를 찾으면 쉽게 복사가능.\n\n#!wget \"https://raw.githubusercontent.com/guebin/IP2022/master/_notebooks/2022-03-28-(4%EC%A3%BC%EC%B0%A8)%203%EC%9B%9428%EC%9D%BC.ipynb\""
  },
  {
    "objectID": "posts/day2.html#실습20-블로그-꾸미기",
    "href": "posts/day2.html#실습20-블로그-꾸미기",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습20: 블로그 꾸미기",
    "text": "실습20: 블로그 꾸미기\n- 보람 블로그\n\nhttps://boram-coco.github.io/coco/"
  },
  {
    "objectID": "posts/day2.html#실습21-주피터노트북파일에-이미지-넣기",
    "href": "posts/day2.html#실습21-주피터노트북파일에-이미지-넣기",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습21: 주피터노트북파일에 이미지 넣기",
    "text": "실습21: 주피터노트북파일에 이미지 넣기\n- 방법1\n\n!wget https://imgs.xkcd.com/comics/sandwich.png\n\n--2024-01-03 14:08:48--  https://imgs.xkcd.com/comics/sandwich.png\nResolving imgs.xkcd.com (imgs.xkcd.com)... 146.75.48.67, 2a04:4e42:7c::67\nConnecting to imgs.xkcd.com (imgs.xkcd.com)|146.75.48.67|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 11828 (12K) [image/png]\nSaving to: ‘sandwich.png’\n\nsandwich.png        100%[===================&gt;]  11.55K  --.-KB/s    in 0s      \n\n2024-01-03 14:08:48 (69.3 MB/s) - ‘sandwich.png’ saved [11828/11828]\n\n\n\n\n- 방법2\n\n- 방법3: 스크린샷"
  },
  {
    "objectID": "posts/day2.html#실습22-182-ssh차단-우회하기",
    "href": "posts/day2.html#실습22-182-ssh차단-우회하기",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습22: 182 ssh차단 우회하기",
    "text": "실습22: 182 ssh차단 우회하기\n- 내용없음."
  },
  {
    "objectID": "posts/day2.html#실습23-186-컴퓨터-접속",
    "href": "posts/day2.html#실습23-186-컴퓨터-접속",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습23: 186 컴퓨터 접속",
    "text": "실습23: 186 컴퓨터 접속\n- ssh를 이용하여 접속\nssh {이후의 코드는 보안상 비밀임}"
  },
  {
    "objectID": "posts/day2.html#실습24-186-ssh차단-우회하기",
    "href": "posts/day2.html#실습24-186-ssh차단-우회하기",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습24: 186 ssh차단 우회하기",
    "text": "실습24: 186 ssh차단 우회하기\n- 내용없음."
  },
  {
    "objectID": "posts/day2.html#실습25-186-컴퓨터-개발환경-셋팅하기-hw",
    "href": "posts/day2.html#실습25-186-컴퓨터-개발환경-셋팅하기-hw",
    "title": "Day2: 실습13 - 실습25",
    "section": "실습25: 186 컴퓨터 개발환경 셋팅하기 (HW)",
    "text": "실습25: 186 컴퓨터 개발환경 셋팅하기 (HW)\n- ref: https://guebin.github.io/MP2023/offline/231128.html\n여기에서 2-E, 2-G 빼고 하기"
  },
  {
    "objectID": "posts/day6.html#실습68-100mb-충돌",
    "href": "posts/day6.html#실습68-100mb-충돌",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습68: 100MB 충돌",
    "text": "실습68: 100MB 충돌\n- 100MB가 넘는 파일을 upload할 경우 생기는 충돌 재현\ngit clone https://github.com/guebin/dinner.git # 각자 레포를 만들고 클론할것 \ncd dinner # 클론한 repo로 이동\ngit config credential.helper store # git 등록 \nwget https://media.githubusercontent.com/media/guebin/PP2023/main/posts/fashion-mnist_train.csv # 100MB넘는 csv다운로드 \ngit add .\ngit commit -m .\ngit push \n#여기서 1차당황\n- 삭제후 다시 push\nrm fashion-mnist_train.csv \ngit add .\ngit commit -m .\ngit push \n# 여기서 2차당황\n- 해결책? local에서 깃폴더삭제하고 다시 clone"
  },
  {
    "objectID": "posts/day6.html#실습69-git-ignore",
    "href": "posts/day6.html#실습69-git-ignore",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습69: git ignore",
    "text": "실습69: git ignore\n- 다시 아래의 상황을 만듦.\ngit clone https://github.com/guebin/dinner.git # 각자 레포를 만들고 클론할것 \ncd dinner # 클론한 repo로 이동\ngit config credential.helper store # git 등록 \nwget https://media.githubusercontent.com/media/guebin/PP2023/main/posts/fashion-mnist_train.csv # 100MB넘는 csv다운로드 \n- .gitignore 파일 생성\n\n\n~/dinner/.gitignore\n\n*csv\n\n- 아래를 시도\ngit add .\ngit commit -m .\ngit push \n- 하위폴더도 영향받음을 확인\n\ndata라는 폴더를 생성\nfashion-mnist_train.csv 를 data 폴더로 이동\nls data &gt; ./data/data_list.txt 실행 (무슨뜻?)\ngithub으로 push\n\n- .gitignore를 잘 사용하는 방법들은 (예를들어서 특정 폴더안에 있는 파일은 모두 git에서 무시하고 싶을때) ChatGPT를 이용하여 스스로 터득할 것"
  },
  {
    "objectID": "posts/day6.html#실습70-블로그-제목이-update-되지-않을때",
    "href": "posts/day6.html#실습70-블로그-제목이-update-되지-않을때",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습70: 블로그 제목이 update 되지 않을때",
    "text": "실습70: 블로그 제목이 update 되지 않을때\n- 아래를 수행\nrm -rf docs\ngit add .\ngit commit -m .\ngit push\nquarto render \ngit add .\ngit commit -m .\ngit push"
  },
  {
    "objectID": "posts/day6.html#실습71-dinner를-codespace로-만들기",
    "href": "posts/day6.html#실습71-dinner를-codespace로-만들기",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습71: dinner를 codespace로 만들기",
    "text": "실습71: dinner를 codespace로 만들기"
  },
  {
    "objectID": "posts/day6.html#실습72-revert-vs-reset",
    "href": "posts/day6.html#실습72-revert-vs-reset",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습72: revert vs reset",
    "text": "실습72: revert vs reset"
  },
  {
    "objectID": "posts/day6.html#실습73-한꺼풀씩-revert",
    "href": "posts/day6.html#실습73-한꺼풀씩-revert",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습73: 한꺼풀씩 revert",
    "text": "실습73: 한꺼풀씩 revert"
  },
  {
    "objectID": "posts/day6.html#실습74-revert-reset이-가능한-이유",
    "href": "posts/day6.html#실습74-revert-reset이-가능한-이유",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습74: revert, reset이 가능한 이유?",
    "text": "실습74: revert, reset이 가능한 이유?"
  },
  {
    "objectID": "posts/day6.html#실습75-git과-github의-차이점",
    "href": "posts/day6.html#실습75-git과-github의-차이점",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습75: git과 github의 차이점",
    "text": "실습75: git과 github의 차이점"
  },
  {
    "objectID": "posts/day6.html#실습76-git-branch",
    "href": "posts/day6.html#실습76-git-branch",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습76: git branch",
    "text": "실습76: git branch"
  },
  {
    "objectID": "posts/day6.html#실습77-merge-와-rebase의-차이점",
    "href": "posts/day6.html#실습77-merge-와-rebase의-차이점",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습77: merge 와 rebase의 차이점",
    "text": "실습77: merge 와 rebase의 차이점\n- 이거 제가 영상에서 설명을 좀 버벅였는데요.. 큰 차이는 없고 git merge를 하면 “재정렬”이 일어나지 않고 git rebase는 “재정렬”이 일어나며 이전에 했던 작업들에 새로운 hash가 부여된다는 점이 차이점입니다."
  },
  {
    "objectID": "posts/day6.html#실습78-제가-쓰는-방식",
    "href": "posts/day6.html#실습78-제가-쓰는-방식",
    "title": "Day6: 실습68 - 실습77",
    "section": "실습78: 제가 쓰는 방식",
    "text": "실습78: 제가 쓰는 방식\n- 브랜치쓰지 않음.\n- git revert, git reset 정도만 활용"
  }
]